/*
DCSA OpenAPI specification for Electronic Bill of Lading

API specification issued by DCSA.org.  For explanation to specific values or objects please refer to the <a href='https://dcsa.org/wp-content/uploads/2020/12/20201208-DCSA-P1-DCSA-Information-Model-v3.0-FINAL.pdf'>Information Model v3.0</a>  It is possible to use this API as a standalone API. In order to do so it is necessary to use the poll-endPoint - /v1/events  in order to poll event information.  It is recomended to implement the <a href='https://app.swaggerhub.com/apis/dcsaorg/DOCUMENTATION_EVENT_HUB'>DCSA Documentation Event Hub</a> in order to use the push model. Here events are pushed as they occur.

API version: 1.0.0
Contact: info@dcsa.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bol

import (
	"encoding/json"
)

// UtilizedTransportEquipments struct for UtilizedTransportEquipments
type UtilizedTransportEquipments struct {
	UtilizedTransportEquipments []UtilizedTransportEquipment `json:"utilizedTransportEquipments,omitempty"`
}

// NewUtilizedTransportEquipments instantiates a new UtilizedTransportEquipments object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUtilizedTransportEquipments() *UtilizedTransportEquipments {
	this := UtilizedTransportEquipments{}
	return &this
}

// NewUtilizedTransportEquipmentsWithDefaults instantiates a new UtilizedTransportEquipments object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUtilizedTransportEquipmentsWithDefaults() *UtilizedTransportEquipments {
	this := UtilizedTransportEquipments{}
	return &this
}

// GetUtilizedTransportEquipments returns the UtilizedTransportEquipments field value if set, zero value otherwise.
func (o *UtilizedTransportEquipments) GetUtilizedTransportEquipments() []UtilizedTransportEquipment {
	if o == nil || o.UtilizedTransportEquipments == nil {
		var ret []UtilizedTransportEquipment
		return ret
	}
	return o.UtilizedTransportEquipments
}

// GetUtilizedTransportEquipmentsOk returns a tuple with the UtilizedTransportEquipments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UtilizedTransportEquipments) GetUtilizedTransportEquipmentsOk() ([]UtilizedTransportEquipment, bool) {
	if o == nil || o.UtilizedTransportEquipments == nil {
		return nil, false
	}
	return o.UtilizedTransportEquipments, true
}

// HasUtilizedTransportEquipments returns a boolean if a field has been set.
func (o *UtilizedTransportEquipments) HasUtilizedTransportEquipments() bool {
	if o != nil && o.UtilizedTransportEquipments != nil {
		return true
	}

	return false
}

// SetUtilizedTransportEquipments gets a reference to the given []UtilizedTransportEquipment and assigns it to the UtilizedTransportEquipments field.
func (o *UtilizedTransportEquipments) SetUtilizedTransportEquipments(v []UtilizedTransportEquipment) {
	o.UtilizedTransportEquipments = v
}

func (o UtilizedTransportEquipments) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.UtilizedTransportEquipments != nil {
		toSerialize["utilizedTransportEquipments"] = o.UtilizedTransportEquipments
	}
	return json.Marshal(toSerialize)
}

type NullableUtilizedTransportEquipments struct {
	value *UtilizedTransportEquipments
	isSet bool
}

func (v NullableUtilizedTransportEquipments) Get() *UtilizedTransportEquipments {
	return v.value
}

func (v *NullableUtilizedTransportEquipments) Set(val *UtilizedTransportEquipments) {
	v.value = val
	v.isSet = true
}

func (v NullableUtilizedTransportEquipments) IsSet() bool {
	return v.isSet
}

func (v *NullableUtilizedTransportEquipments) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUtilizedTransportEquipments(val *UtilizedTransportEquipments) *NullableUtilizedTransportEquipments {
	return &NullableUtilizedTransportEquipments{value: val, isSet: true}
}

func (v NullableUtilizedTransportEquipments) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUtilizedTransportEquipments) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
