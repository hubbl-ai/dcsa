/*
DCSA OpenAPI specification for Electronic Bill of Lading

API specification issued by DCSA.org.  For explanation to specific values or objects please refer to the <a href='https://dcsa.org/wp-content/uploads/2020/12/20201208-DCSA-P1-DCSA-Information-Model-v3.0-FINAL.pdf'>Information Model v3.0</a>  It is possible to use this API as a standalone API. In order to do so it is necessary to use the poll-endPoint - /v1/events  in order to poll event information.  It is recomended to implement the <a href='https://app.swaggerhub.com/apis/dcsaorg/DOCUMENTATION_EVENT_HUB'>DCSA Documentation Event Hub</a> in order to use the push model. Here events are pushed as they occur.

API version: 1.0.0
Contact: info@dcsa.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// ShipmentEventTypeCode The status of the document in the process. Possible values are - RECE (Received) - DRFT (Drafted) - PENA (Pending Approval) - PENU (Pending Update) - REJE (Rejected) - APPR (Approved) - ISSU (Issued) - SURR (Surrendered) - SUBM (Submitted) - VOID (Void) - CONF (Confirmed)
type ShipmentEventTypeCode string

// List of shipmentEventTypeCode
const (
	RECE ShipmentEventTypeCode = "RECE"
	DRFT ShipmentEventTypeCode = "DRFT"
	PENA ShipmentEventTypeCode = "PENA"
	PENU ShipmentEventTypeCode = "PENU"
	REJE ShipmentEventTypeCode = "REJE"
	APPR ShipmentEventTypeCode = "APPR"
	ISSU ShipmentEventTypeCode = "ISSU"
	SURR ShipmentEventTypeCode = "SURR"
	SUBM ShipmentEventTypeCode = "SUBM"
	VOID ShipmentEventTypeCode = "VOID"
	CONF ShipmentEventTypeCode = "CONF"
)

// All allowed values of ShipmentEventTypeCode enum
var AllowedShipmentEventTypeCodeEnumValues = []ShipmentEventTypeCode{
	"RECE",
	"DRFT",
	"PENA",
	"PENU",
	"REJE",
	"APPR",
	"ISSU",
	"SURR",
	"SUBM",
	"VOID",
	"CONF",
}

func (v *ShipmentEventTypeCode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ShipmentEventTypeCode(value)
	for _, existing := range AllowedShipmentEventTypeCodeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ShipmentEventTypeCode", value)
}

// NewShipmentEventTypeCodeFromValue returns a pointer to a valid ShipmentEventTypeCode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewShipmentEventTypeCodeFromValue(v string) (*ShipmentEventTypeCode, error) {
	ev := ShipmentEventTypeCode(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ShipmentEventTypeCode: valid values are %v", v, AllowedShipmentEventTypeCodeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ShipmentEventTypeCode) IsValid() bool {
	for _, existing := range AllowedShipmentEventTypeCodeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to shipmentEventTypeCode value
func (v ShipmentEventTypeCode) Ptr() *ShipmentEventTypeCode {
	return &v
}

type NullableShipmentEventTypeCode struct {
	value *ShipmentEventTypeCode
	isSet bool
}

func (v NullableShipmentEventTypeCode) Get() *ShipmentEventTypeCode {
	return v.value
}

func (v *NullableShipmentEventTypeCode) Set(val *ShipmentEventTypeCode) {
	v.value = val
	v.isSet = true
}

func (v NullableShipmentEventTypeCode) IsSet() bool {
	return v.isSet
}

func (v *NullableShipmentEventTypeCode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableShipmentEventTypeCode(val *ShipmentEventTypeCode) *NullableShipmentEventTypeCode {
	return &NullableShipmentEventTypeCode{value: val, isSet: true}
}

func (v NullableShipmentEventTypeCode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableShipmentEventTypeCode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
