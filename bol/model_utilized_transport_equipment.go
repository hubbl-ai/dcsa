/*
DCSA OpenAPI specification for Electronic Bill of Lading

API specification issued by DCSA.org.  For explanation to specific values or objects please refer to the <a href='https://dcsa.org/wp-content/uploads/2020/12/20201208-DCSA-P1-DCSA-Information-Model-v3.0-FINAL.pdf'>Information Model v3.0</a>  It is possible to use this API as a standalone API. In order to do so it is necessary to use the poll-endPoint - /v1/events  in order to poll event information.  It is recomended to implement the <a href='https://app.swaggerhub.com/apis/dcsaorg/DOCUMENTATION_EVENT_HUB'>DCSA Documentation Event Hub</a> in order to use the push model. Here events are pushed as they occur.

API version: 1.0.0
Contact: info@dcsa.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bol

import (
	"encoding/json"

	"github.com/hubbl-ai/dcsa/common"
)

// UtilizedTransportEquipment specifies the container assigned to a shipment
type UtilizedTransportEquipment struct {
	Equipment            Equipment         `json:"equipment"`
	CargoGrossWeightUnit common.WeightUnit `json:"cargoGrossWeightUnit"`
	// The grand total weight of the cargo and weight per container(s) including packaging items being carried, which can be expressed in imperial or metric terms, as provided by the shipper. Excludes the tare weight of the container(s).
	CargoGrossWeight float32 `json:"cargoGrossWeight"`
	// specifies the settings for an active reefer container used to a shipment.
	ActiveReeferSettings *map[string]interface{} `json:"activeReeferSettings,omitempty"`
	Seals                []Seal                  `json:"seals,omitempty"`
}

// NewUtilizedTransportEquipment instantiates a new UtilizedTransportEquipment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUtilizedTransportEquipment(equipment Equipment, cargoGrossWeightUnit common.WeightUnit, cargoGrossWeight float32) *UtilizedTransportEquipment {
	this := UtilizedTransportEquipment{}
	this.Equipment = equipment
	this.CargoGrossWeightUnit = cargoGrossWeightUnit
	this.CargoGrossWeight = cargoGrossWeight
	return &this
}

// NewUtilizedTransportEquipmentWithDefaults instantiates a new UtilizedTransportEquipment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUtilizedTransportEquipmentWithDefaults() *UtilizedTransportEquipment {
	this := UtilizedTransportEquipment{}
	return &this
}

// GetEquipment returns the Equipment field value
func (o *UtilizedTransportEquipment) GetEquipment() Equipment {
	if o == nil {
		var ret Equipment
		return ret
	}

	return o.Equipment
}

// GetEquipmentOk returns a tuple with the Equipment field value
// and a boolean to check if the value has been set.
func (o *UtilizedTransportEquipment) GetEquipmentOk() (*Equipment, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Equipment, true
}

// SetEquipment sets field value
func (o *UtilizedTransportEquipment) SetEquipment(v Equipment) {
	o.Equipment = v
}

// GetCargoGrossWeightUnit returns the CargoGrossWeightUnit field value
func (o *UtilizedTransportEquipment) GetCargoGrossWeightUnit() common.WeightUnit {
	if o == nil {
		var ret common.WeightUnit
		return ret
	}

	return o.CargoGrossWeightUnit
}

// GetCargoGrossWeightUnitOk returns a tuple with the CargoGrossWeightUnit field value
// and a boolean to check if the value has been set.
func (o *UtilizedTransportEquipment) GetCargoGrossWeightUnitOk() (*common.WeightUnit, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CargoGrossWeightUnit, true
}

// SetCargoGrossWeightUnit sets field value
func (o *UtilizedTransportEquipment) SetCargoGrossWeightUnit(v common.WeightUnit) {
	o.CargoGrossWeightUnit = v
}

// GetCargoGrossWeight returns the CargoGrossWeight field value
func (o *UtilizedTransportEquipment) GetCargoGrossWeight() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.CargoGrossWeight
}

// GetCargoGrossWeightOk returns a tuple with the CargoGrossWeight field value
// and a boolean to check if the value has been set.
func (o *UtilizedTransportEquipment) GetCargoGrossWeightOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CargoGrossWeight, true
}

// SetCargoGrossWeight sets field value
func (o *UtilizedTransportEquipment) SetCargoGrossWeight(v float32) {
	o.CargoGrossWeight = v
}

// GetActiveReeferSettings returns the ActiveReeferSettings field value if set, zero value otherwise.
func (o *UtilizedTransportEquipment) GetActiveReeferSettings() map[string]interface{} {
	if o == nil || o.ActiveReeferSettings == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.ActiveReeferSettings
}

// GetActiveReeferSettingsOk returns a tuple with the ActiveReeferSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UtilizedTransportEquipment) GetActiveReeferSettingsOk() (*map[string]interface{}, bool) {
	if o == nil || o.ActiveReeferSettings == nil {
		return nil, false
	}
	return o.ActiveReeferSettings, true
}

// HasActiveReeferSettings returns a boolean if a field has been set.
func (o *UtilizedTransportEquipment) HasActiveReeferSettings() bool {
	if o != nil && o.ActiveReeferSettings != nil {
		return true
	}

	return false
}

// SetActiveReeferSettings gets a reference to the given map[string]interface{} and assigns it to the ActiveReeferSettings field.
func (o *UtilizedTransportEquipment) SetActiveReeferSettings(v map[string]interface{}) {
	o.ActiveReeferSettings = &v
}

// GetSeals returns the Seals field value if set, zero value otherwise.
func (o *UtilizedTransportEquipment) GetSeals() []Seal {
	if o == nil || o.Seals == nil {
		var ret []Seal
		return ret
	}
	return o.Seals
}

// GetSealsOk returns a tuple with the Seals field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UtilizedTransportEquipment) GetSealsOk() ([]Seal, bool) {
	if o == nil || o.Seals == nil {
		return nil, false
	}
	return o.Seals, true
}

// HasSeals returns a boolean if a field has been set.
func (o *UtilizedTransportEquipment) HasSeals() bool {
	if o != nil && o.Seals != nil {
		return true
	}

	return false
}

// SetSeals gets a reference to the given []Seal and assigns it to the Seals field.
func (o *UtilizedTransportEquipment) SetSeals(v []Seal) {
	o.Seals = v
}

func (o UtilizedTransportEquipment) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["equipment"] = o.Equipment
	}
	if true {
		toSerialize["cargoGrossWeightUnit"] = o.CargoGrossWeightUnit
	}
	if true {
		toSerialize["cargoGrossWeight"] = o.CargoGrossWeight
	}
	if o.ActiveReeferSettings != nil {
		toSerialize["activeReeferSettings"] = o.ActiveReeferSettings
	}
	if o.Seals != nil {
		toSerialize["seals"] = o.Seals
	}
	return json.Marshal(toSerialize)
}

type NullableUtilizedTransportEquipment struct {
	value *UtilizedTransportEquipment
	isSet bool
}

func (v NullableUtilizedTransportEquipment) Get() *UtilizedTransportEquipment {
	return v.value
}

func (v *NullableUtilizedTransportEquipment) Set(val *UtilizedTransportEquipment) {
	v.value = val
	v.isSet = true
}

func (v NullableUtilizedTransportEquipment) IsSet() bool {
	return v.isSet
}

func (v *NullableUtilizedTransportEquipment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUtilizedTransportEquipment(val *UtilizedTransportEquipment) *NullableUtilizedTransportEquipment {
	return &NullableUtilizedTransportEquipment{value: val, isSet: true}
}

func (v NullableUtilizedTransportEquipment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUtilizedTransportEquipment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
