/*
DCSA OpenAPI specification for Electronic Bill of Lading

API specification issued by DCSA.org.  For explanation to specific values or objects please refer to the <a href='https://dcsa.org/wp-content/uploads/2020/12/20201208-DCSA-P1-DCSA-Information-Model-v3.0-FINAL.pdf'>Information Model v3.0</a>  It is possible to use this API as a standalone API. In order to do so it is necessary to use the poll-endPoint - /v1/events  in order to poll event information.  It is recomended to implement the <a href='https://app.swaggerhub.com/apis/dcsaorg/DOCUMENTATION_EVENT_HUB'>DCSA Documentation Event Hub</a> in order to use the push model. Here events are pushed as they occur.

API version: 1.0.0
Contact: info@dcsa.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bol

import (
	"encoding/json"
)

// CargoLineItem identifies the specific details of packages within a cargo item.
type CargoLineItem struct {
	// Identifies the cargo line item (package) within the cargo. The cargo line item ID is provided by the shipper and is used to define the stuffing. Cargo line items belonging to the same cargo items are stuffed in the same container.
	CargoLineItemID string `json:"cargoLineItemID"`
	// The identifying details of a package or the actual markings that appear on the package(s). This information is provided by the shipper.
	ShippingMarks string `json:"shippingMarks"`
}

// NewCargoLineItem instantiates a new CargoLineItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCargoLineItem(cargoLineItemID string, shippingMarks string) *CargoLineItem {
	this := CargoLineItem{}
	this.CargoLineItemID = cargoLineItemID
	this.ShippingMarks = shippingMarks
	return &this
}

// NewCargoLineItemWithDefaults instantiates a new CargoLineItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCargoLineItemWithDefaults() *CargoLineItem {
	this := CargoLineItem{}
	return &this
}

// GetCargoLineItemID returns the CargoLineItemID field value
func (o *CargoLineItem) GetCargoLineItemID() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CargoLineItemID
}

// GetCargoLineItemIDOk returns a tuple with the CargoLineItemID field value
// and a boolean to check if the value has been set.
func (o *CargoLineItem) GetCargoLineItemIDOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CargoLineItemID, true
}

// SetCargoLineItemID sets field value
func (o *CargoLineItem) SetCargoLineItemID(v string) {
	o.CargoLineItemID = v
}

// GetShippingMarks returns the ShippingMarks field value
func (o *CargoLineItem) GetShippingMarks() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ShippingMarks
}

// GetShippingMarksOk returns a tuple with the ShippingMarks field value
// and a boolean to check if the value has been set.
func (o *CargoLineItem) GetShippingMarksOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ShippingMarks, true
}

// SetShippingMarks sets field value
func (o *CargoLineItem) SetShippingMarks(v string) {
	o.ShippingMarks = v
}

func (o CargoLineItem) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["cargoLineItemID"] = o.CargoLineItemID
	}
	if true {
		toSerialize["shippingMarks"] = o.ShippingMarks
	}
	return json.Marshal(toSerialize)
}

type NullableCargoLineItem struct {
	value *CargoLineItem
	isSet bool
}

func (v NullableCargoLineItem) Get() *CargoLineItem {
	return v.value
}

func (v *NullableCargoLineItem) Set(val *CargoLineItem) {
	v.value = val
	v.isSet = true
}

func (v NullableCargoLineItem) IsSet() bool {
	return v.isSet
}

func (v *NullableCargoLineItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCargoLineItem(val *CargoLineItem) *NullableCargoLineItem {
	return &NullableCargoLineItem{value: val, isSet: true}
}

func (v NullableCargoLineItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCargoLineItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
