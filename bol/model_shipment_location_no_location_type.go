/*
DCSA OpenAPI specification for Electronic Bill of Lading

API specification issued by DCSA.org.  For explanation to specific values or objects please refer to the <a href='https://dcsa.org/wp-content/uploads/2020/12/20201208-DCSA-P1-DCSA-Information-Model-v3.0-FINAL.pdf'>Information Model v3.0</a>  It is possible to use this API as a standalone API. In order to do so it is necessary to use the poll-endPoint - /v1/events  in order to poll event information.  It is recomended to implement the <a href='https://app.swaggerhub.com/apis/dcsaorg/DOCUMENTATION_EVENT_HUB'>DCSA Documentation Event Hub</a> in order to use the push model. Here events are pushed as they occur.

API version: 1.0.0
Contact: info@dcsa.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bol

import (
	"encoding/json"
)

// ShipmentLocationNoLocationType maps the relationship between Shipment and Location, e.g., the place of receipt and the places of delivery for a specific shipment.
type ShipmentLocationNoLocationType struct {
	Location *Location `json:"location,omitempty"`
	// The address of the party to be displayed on the transport document.
	DisplayedName *string `json:"displayedName,omitempty"`
}

// NewShipmentLocationNoLocationType instantiates a new ShipmentLocationNoLocationType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewShipmentLocationNoLocationType() *ShipmentLocationNoLocationType {
	this := ShipmentLocationNoLocationType{}
	return &this
}

// NewShipmentLocationNoLocationTypeWithDefaults instantiates a new ShipmentLocationNoLocationType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewShipmentLocationNoLocationTypeWithDefaults() *ShipmentLocationNoLocationType {
	this := ShipmentLocationNoLocationType{}
	return &this
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *ShipmentLocationNoLocationType) GetLocation() Location {
	if o == nil || o.Location == nil {
		var ret Location
		return ret
	}
	return *o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShipmentLocationNoLocationType) GetLocationOk() (*Location, bool) {
	if o == nil || o.Location == nil {
		return nil, false
	}
	return o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *ShipmentLocationNoLocationType) HasLocation() bool {
	if o != nil && o.Location != nil {
		return true
	}

	return false
}

// SetLocation gets a reference to the given Location and assigns it to the Location field.
func (o *ShipmentLocationNoLocationType) SetLocation(v Location) {
	o.Location = &v
}

// GetDisplayedName returns the DisplayedName field value if set, zero value otherwise.
func (o *ShipmentLocationNoLocationType) GetDisplayedName() string {
	if o == nil || o.DisplayedName == nil {
		var ret string
		return ret
	}
	return *o.DisplayedName
}

// GetDisplayedNameOk returns a tuple with the DisplayedName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShipmentLocationNoLocationType) GetDisplayedNameOk() (*string, bool) {
	if o == nil || o.DisplayedName == nil {
		return nil, false
	}
	return o.DisplayedName, true
}

// HasDisplayedName returns a boolean if a field has been set.
func (o *ShipmentLocationNoLocationType) HasDisplayedName() bool {
	if o != nil && o.DisplayedName != nil {
		return true
	}

	return false
}

// SetDisplayedName gets a reference to the given string and assigns it to the DisplayedName field.
func (o *ShipmentLocationNoLocationType) SetDisplayedName(v string) {
	o.DisplayedName = &v
}

func (o ShipmentLocationNoLocationType) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Location != nil {
		toSerialize["location"] = o.Location
	}
	if o.DisplayedName != nil {
		toSerialize["displayedName"] = o.DisplayedName
	}
	return json.Marshal(toSerialize)
}

type NullableShipmentLocationNoLocationType struct {
	value *ShipmentLocationNoLocationType
	isSet bool
}

func (v NullableShipmentLocationNoLocationType) Get() *ShipmentLocationNoLocationType {
	return v.value
}

func (v *NullableShipmentLocationNoLocationType) Set(val *ShipmentLocationNoLocationType) {
	v.value = val
	v.isSet = true
}

func (v NullableShipmentLocationNoLocationType) IsSet() bool {
	return v.isSet
}

func (v *NullableShipmentLocationNoLocationType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableShipmentLocationNoLocationType(val *ShipmentLocationNoLocationType) *NullableShipmentLocationNoLocationType {
	return &NullableShipmentLocationNoLocationType{value: val, isSet: true}
}

func (v NullableShipmentLocationNoLocationType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableShipmentLocationNoLocationType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
