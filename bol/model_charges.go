/*
DCSA OpenAPI specification for Electronic Bill of Lading

API specification issued by DCSA.org.  For explanation to specific values or objects please refer to the <a href='https://dcsa.org/wp-content/uploads/2020/12/20201208-DCSA-P1-DCSA-Information-Model-v3.0-FINAL.pdf'>Information Model v3.0</a>  It is possible to use this API as a standalone API. In order to do so it is necessary to use the poll-endPoint - /v1/events  in order to poll event information.  It is recomended to implement the <a href='https://app.swaggerhub.com/apis/dcsaorg/DOCUMENTATION_EVENT_HUB'>DCSA Documentation Event Hub</a> in order to use the push model. Here events are pushed as they occur.

API version: 1.0.0
Contact: info@dcsa.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bol

import (
	"encoding/json"
)

// Charges struct for Charges
type Charges struct {
	Charges []Charge `json:"charges,omitempty"`
}

// NewCharges instantiates a new Charges object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCharges() *Charges {
	this := Charges{}
	return &this
}

// NewChargesWithDefaults instantiates a new Charges object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChargesWithDefaults() *Charges {
	this := Charges{}
	return &this
}

// GetCharges returns the Charges field value if set, zero value otherwise.
func (o *Charges) GetCharges() []Charge {
	if o == nil || o.Charges == nil {
		var ret []Charge
		return ret
	}
	return o.Charges
}

// GetChargesOk returns a tuple with the Charges field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Charges) GetChargesOk() ([]Charge, bool) {
	if o == nil || o.Charges == nil {
		return nil, false
	}
	return o.Charges, true
}

// HasCharges returns a boolean if a field has been set.
func (o *Charges) HasCharges() bool {
	if o != nil && o.Charges != nil {
		return true
	}

	return false
}

// SetCharges gets a reference to the given []Charge and assigns it to the Charges field.
func (o *Charges) SetCharges(v []Charge) {
	o.Charges = v
}

func (o Charges) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Charges != nil {
		toSerialize["charges"] = o.Charges
	}
	return json.Marshal(toSerialize)
}

type NullableCharges struct {
	value *Charges
	isSet bool
}

func (v NullableCharges) Get() *Charges {
	return v.value
}

func (v *NullableCharges) Set(val *Charges) {
	v.value = val
	v.isSet = true
}

func (v NullableCharges) IsSet() bool {
	return v.isSet
}

func (v *NullableCharges) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCharges(val *Charges) *NullableCharges {
	return &NullableCharges{value: val, isSet: true}
}

func (v NullableCharges) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCharges) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
