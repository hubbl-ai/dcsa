/*
DCSA OpenAPI specification for Electronic Bill of Lading

API specification issued by DCSA.org.  For explanation to specific values or objects please refer to the <a href='https://dcsa.org/wp-content/uploads/2020/12/20201208-DCSA-P1-DCSA-Information-Model-v3.0-FINAL.pdf'>Information Model v3.0</a>  It is possible to use this API as a standalone API. In order to do so it is necessary to use the poll-endPoint - /v1/events  in order to poll event information.  It is recomended to implement the <a href='https://app.swaggerhub.com/apis/dcsaorg/DOCUMENTATION_EVENT_HUB'>DCSA Documentation Event Hub</a> in order to use the push model. Here events are pushed as they occur.

API version: 1.0.0
Contact: info@dcsa.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bol

import (
	"encoding/json"
)

// PartyNoID refers to a company or a legal entity.
type PartyNoID struct {
	// Name of the party.
	PartyName *string `json:"partyName,omitempty"`
	// The identifying number of the consignee or shipper (Individual or entity) used for tax purposes.
	TaxReference1 *string `json:"taxReference1,omitempty"`
	// Optional second identifying number of the consignee or shipper (Individual or entity) used for tax purposes.
	TaxReference2 *string `json:"taxReference2,omitempty"`
	// The public key used for a digital signature.
	PublicKey *string  `json:"publicKey,omitempty"`
	Address   *Address `json:"address,omitempty"`
	// The Standard Carrier Alpha Code (SCAC) provided by NMFTA.
	NmftaCode *string `json:"nmftaCode,omitempty"`
}

// NewPartyNoID instantiates a new PartyNoID object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPartyNoID() *PartyNoID {
	this := PartyNoID{}
	return &this
}

// NewPartyNoIDWithDefaults instantiates a new PartyNoID object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPartyNoIDWithDefaults() *PartyNoID {
	this := PartyNoID{}
	return &this
}

// GetPartyName returns the PartyName field value if set, zero value otherwise.
func (o *PartyNoID) GetPartyName() string {
	if o == nil || o.PartyName == nil {
		var ret string
		return ret
	}
	return *o.PartyName
}

// GetPartyNameOk returns a tuple with the PartyName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PartyNoID) GetPartyNameOk() (*string, bool) {
	if o == nil || o.PartyName == nil {
		return nil, false
	}
	return o.PartyName, true
}

// HasPartyName returns a boolean if a field has been set.
func (o *PartyNoID) HasPartyName() bool {
	if o != nil && o.PartyName != nil {
		return true
	}

	return false
}

// SetPartyName gets a reference to the given string and assigns it to the PartyName field.
func (o *PartyNoID) SetPartyName(v string) {
	o.PartyName = &v
}

// GetTaxReference1 returns the TaxReference1 field value if set, zero value otherwise.
func (o *PartyNoID) GetTaxReference1() string {
	if o == nil || o.TaxReference1 == nil {
		var ret string
		return ret
	}
	return *o.TaxReference1
}

// GetTaxReference1Ok returns a tuple with the TaxReference1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PartyNoID) GetTaxReference1Ok() (*string, bool) {
	if o == nil || o.TaxReference1 == nil {
		return nil, false
	}
	return o.TaxReference1, true
}

// HasTaxReference1 returns a boolean if a field has been set.
func (o *PartyNoID) HasTaxReference1() bool {
	if o != nil && o.TaxReference1 != nil {
		return true
	}

	return false
}

// SetTaxReference1 gets a reference to the given string and assigns it to the TaxReference1 field.
func (o *PartyNoID) SetTaxReference1(v string) {
	o.TaxReference1 = &v
}

// GetTaxReference2 returns the TaxReference2 field value if set, zero value otherwise.
func (o *PartyNoID) GetTaxReference2() string {
	if o == nil || o.TaxReference2 == nil {
		var ret string
		return ret
	}
	return *o.TaxReference2
}

// GetTaxReference2Ok returns a tuple with the TaxReference2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PartyNoID) GetTaxReference2Ok() (*string, bool) {
	if o == nil || o.TaxReference2 == nil {
		return nil, false
	}
	return o.TaxReference2, true
}

// HasTaxReference2 returns a boolean if a field has been set.
func (o *PartyNoID) HasTaxReference2() bool {
	if o != nil && o.TaxReference2 != nil {
		return true
	}

	return false
}

// SetTaxReference2 gets a reference to the given string and assigns it to the TaxReference2 field.
func (o *PartyNoID) SetTaxReference2(v string) {
	o.TaxReference2 = &v
}

// GetPublicKey returns the PublicKey field value if set, zero value otherwise.
func (o *PartyNoID) GetPublicKey() string {
	if o == nil || o.PublicKey == nil {
		var ret string
		return ret
	}
	return *o.PublicKey
}

// GetPublicKeyOk returns a tuple with the PublicKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PartyNoID) GetPublicKeyOk() (*string, bool) {
	if o == nil || o.PublicKey == nil {
		return nil, false
	}
	return o.PublicKey, true
}

// HasPublicKey returns a boolean if a field has been set.
func (o *PartyNoID) HasPublicKey() bool {
	if o != nil && o.PublicKey != nil {
		return true
	}

	return false
}

// SetPublicKey gets a reference to the given string and assigns it to the PublicKey field.
func (o *PartyNoID) SetPublicKey(v string) {
	o.PublicKey = &v
}

// GetAddress returns the Address field value if set, zero value otherwise.
func (o *PartyNoID) GetAddress() Address {
	if o == nil || o.Address == nil {
		var ret Address
		return ret
	}
	return *o.Address
}

// GetAddressOk returns a tuple with the Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PartyNoID) GetAddressOk() (*Address, bool) {
	if o == nil || o.Address == nil {
		return nil, false
	}
	return o.Address, true
}

// HasAddress returns a boolean if a field has been set.
func (o *PartyNoID) HasAddress() bool {
	if o != nil && o.Address != nil {
		return true
	}

	return false
}

// SetAddress gets a reference to the given Address and assigns it to the Address field.
func (o *PartyNoID) SetAddress(v Address) {
	o.Address = &v
}

// GetNmftaCode returns the NmftaCode field value if set, zero value otherwise.
func (o *PartyNoID) GetNmftaCode() string {
	if o == nil || o.NmftaCode == nil {
		var ret string
		return ret
	}
	return *o.NmftaCode
}

// GetNmftaCodeOk returns a tuple with the NmftaCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PartyNoID) GetNmftaCodeOk() (*string, bool) {
	if o == nil || o.NmftaCode == nil {
		return nil, false
	}
	return o.NmftaCode, true
}

// HasNmftaCode returns a boolean if a field has been set.
func (o *PartyNoID) HasNmftaCode() bool {
	if o != nil && o.NmftaCode != nil {
		return true
	}

	return false
}

// SetNmftaCode gets a reference to the given string and assigns it to the NmftaCode field.
func (o *PartyNoID) SetNmftaCode(v string) {
	o.NmftaCode = &v
}

func (o PartyNoID) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.PartyName != nil {
		toSerialize["partyName"] = o.PartyName
	}
	if o.TaxReference1 != nil {
		toSerialize["taxReference1"] = o.TaxReference1
	}
	if o.TaxReference2 != nil {
		toSerialize["taxReference2"] = o.TaxReference2
	}
	if o.PublicKey != nil {
		toSerialize["publicKey"] = o.PublicKey
	}
	if o.Address != nil {
		toSerialize["address"] = o.Address
	}
	if o.NmftaCode != nil {
		toSerialize["nmftaCode"] = o.NmftaCode
	}
	return json.Marshal(toSerialize)
}

type NullablePartyNoID struct {
	value *PartyNoID
	isSet bool
}

func (v NullablePartyNoID) Get() *PartyNoID {
	return v.value
}

func (v *NullablePartyNoID) Set(val *PartyNoID) {
	v.value = val
	v.isSet = true
}

func (v NullablePartyNoID) IsSet() bool {
	return v.isSet
}

func (v *NullablePartyNoID) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePartyNoID(val *PartyNoID) *NullablePartyNoID {
	return &NullablePartyNoID{value: val, isSet: true}
}

func (v NullablePartyNoID) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePartyNoID) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
