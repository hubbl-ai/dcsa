/*
DCSA OpenAPI specification for Electronic Bill of Lading

API specification issued by DCSA.org.  For explanation to specific values or objects please refer to the <a href='https://dcsa.org/wp-content/uploads/2020/12/20201208-DCSA-P1-DCSA-Information-Model-v3.0-FINAL.pdf'>Information Model v3.0</a>  It is possible to use this API as a standalone API. In order to do so it is necessary to use the poll-endPoint - /v1/events  in order to poll event information.  It is recomended to implement the <a href='https://app.swaggerhub.com/apis/dcsaorg/DOCUMENTATION_EVENT_HUB'>DCSA Documentation Event Hub</a> in order to use the push model. Here events are pushed as they occur.

API version: 1.0.0
Contact: info@dcsa.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bol

import (
	"encoding/json"
)

// Charge addresses the monetary value of freight and other service charges for a transport document.
type Charge struct {
	// Description of the charge type applied.
	ChargeType string `json:"chargeType"`
	// The monetary value of all freight and other service charges for a transport document, with a maximum of 2-digit decimals.
	CurrencyAmount float32 `json:"currencyAmount"`
	// The currency for the charge, using a 3-character code (ISO 4217).
	CurrencyCode string `json:"currencyCode"`
	// An indicator of whether a charge is prepaid or collect.
	PaymentTerm string `json:"paymentTerm"`
	// The code specifying the measure unit used for the corresponding unit price for this cost, such as per day, per ton, per square metre.
	CalculationBasis string `json:"calculationBasis"`
	// The unit price of this charge item in the currency of the charge.
	UnitPrice float32 `json:"unitPrice"`
	// The amount of unit for this charge item.
	Quantity float32 `json:"quantity"`
}

// NewCharge instantiates a new Charge object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCharge(chargeType string, currencyAmount float32, currencyCode string, paymentTerm string, calculationBasis string, unitPrice float32, quantity float32) *Charge {
	this := Charge{}
	this.ChargeType = chargeType
	this.CurrencyAmount = currencyAmount
	this.CurrencyCode = currencyCode
	this.PaymentTerm = paymentTerm
	this.CalculationBasis = calculationBasis
	this.UnitPrice = unitPrice
	this.Quantity = quantity
	return &this
}

// NewChargeWithDefaults instantiates a new Charge object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChargeWithDefaults() *Charge {
	this := Charge{}
	return &this
}

// GetChargeType returns the ChargeType field value
func (o *Charge) GetChargeType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ChargeType
}

// GetChargeTypeOk returns a tuple with the ChargeType field value
// and a boolean to check if the value has been set.
func (o *Charge) GetChargeTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ChargeType, true
}

// SetChargeType sets field value
func (o *Charge) SetChargeType(v string) {
	o.ChargeType = v
}

// GetCurrencyAmount returns the CurrencyAmount field value
func (o *Charge) GetCurrencyAmount() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.CurrencyAmount
}

// GetCurrencyAmountOk returns a tuple with the CurrencyAmount field value
// and a boolean to check if the value has been set.
func (o *Charge) GetCurrencyAmountOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CurrencyAmount, true
}

// SetCurrencyAmount sets field value
func (o *Charge) SetCurrencyAmount(v float32) {
	o.CurrencyAmount = v
}

// GetCurrencyCode returns the CurrencyCode field value
func (o *Charge) GetCurrencyCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CurrencyCode
}

// GetCurrencyCodeOk returns a tuple with the CurrencyCode field value
// and a boolean to check if the value has been set.
func (o *Charge) GetCurrencyCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CurrencyCode, true
}

// SetCurrencyCode sets field value
func (o *Charge) SetCurrencyCode(v string) {
	o.CurrencyCode = v
}

// GetPaymentTerm returns the PaymentTerm field value
func (o *Charge) GetPaymentTerm() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PaymentTerm
}

// GetPaymentTermOk returns a tuple with the PaymentTerm field value
// and a boolean to check if the value has been set.
func (o *Charge) GetPaymentTermOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PaymentTerm, true
}

// SetPaymentTerm sets field value
func (o *Charge) SetPaymentTerm(v string) {
	o.PaymentTerm = v
}

// GetCalculationBasis returns the CalculationBasis field value
func (o *Charge) GetCalculationBasis() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CalculationBasis
}

// GetCalculationBasisOk returns a tuple with the CalculationBasis field value
// and a boolean to check if the value has been set.
func (o *Charge) GetCalculationBasisOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CalculationBasis, true
}

// SetCalculationBasis sets field value
func (o *Charge) SetCalculationBasis(v string) {
	o.CalculationBasis = v
}

// GetUnitPrice returns the UnitPrice field value
func (o *Charge) GetUnitPrice() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.UnitPrice
}

// GetUnitPriceOk returns a tuple with the UnitPrice field value
// and a boolean to check if the value has been set.
func (o *Charge) GetUnitPriceOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UnitPrice, true
}

// SetUnitPrice sets field value
func (o *Charge) SetUnitPrice(v float32) {
	o.UnitPrice = v
}

// GetQuantity returns the Quantity field value
func (o *Charge) GetQuantity() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Quantity
}

// GetQuantityOk returns a tuple with the Quantity field value
// and a boolean to check if the value has been set.
func (o *Charge) GetQuantityOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Quantity, true
}

// SetQuantity sets field value
func (o *Charge) SetQuantity(v float32) {
	o.Quantity = v
}

func (o Charge) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["chargeType"] = o.ChargeType
	}
	if true {
		toSerialize["currencyAmount"] = o.CurrencyAmount
	}
	if true {
		toSerialize["currencyCode"] = o.CurrencyCode
	}
	if true {
		toSerialize["paymentTerm"] = o.PaymentTerm
	}
	if true {
		toSerialize["calculationBasis"] = o.CalculationBasis
	}
	if true {
		toSerialize["unitPrice"] = o.UnitPrice
	}
	if true {
		toSerialize["quantity"] = o.Quantity
	}
	return json.Marshal(toSerialize)
}

type NullableCharge struct {
	value *Charge
	isSet bool
}

func (v NullableCharge) Get() *Charge {
	return v.value
}

func (v *NullableCharge) Set(val *Charge) {
	v.value = val
	v.isSet = true
}

func (v NullableCharge) IsSet() bool {
	return v.isSet
}

func (v *NullableCharge) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCharge(val *Charge) *NullableCharge {
	return &NullableCharge{value: val, isSet: true}
}

func (v NullableCharge) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCharge) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
