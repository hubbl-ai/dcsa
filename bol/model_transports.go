/*
DCSA OpenAPI specification for Electronic Bill of Lading

API specification issued by DCSA.org.  For explanation to specific values or objects please refer to the <a href='https://dcsa.org/wp-content/uploads/2020/12/20201208-DCSA-P1-DCSA-Information-Model-v3.0-FINAL.pdf'>Information Model v3.0</a>  It is possible to use this API as a standalone API. In order to do so it is necessary to use the poll-endPoint - /v1/events  in order to poll event information.  It is recomended to implement the <a href='https://app.swaggerhub.com/apis/dcsaorg/DOCUMENTATION_EVENT_HUB'>DCSA Documentation Event Hub</a> in order to use the push model. Here events are pushed as they occur.

API version: 1.0.0
Contact: info@dcsa.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bol

import (
	"encoding/json"
)

// Transports struct for Transports
type Transports struct {
	Transports []Transport `json:"transports,omitempty"`
}

// NewTransports instantiates a new Transports object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransports() *Transports {
	this := Transports{}
	return &this
}

// NewTransportsWithDefaults instantiates a new Transports object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransportsWithDefaults() *Transports {
	this := Transports{}
	return &this
}

// GetTransports returns the Transports field value if set, zero value otherwise.
func (o *Transports) GetTransports() []Transport {
	if o == nil || o.Transports == nil {
		var ret []Transport
		return ret
	}
	return o.Transports
}

// GetTransportsOk returns a tuple with the Transports field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transports) GetTransportsOk() ([]Transport, bool) {
	if o == nil || o.Transports == nil {
		return nil, false
	}
	return o.Transports, true
}

// HasTransports returns a boolean if a field has been set.
func (o *Transports) HasTransports() bool {
	if o != nil && o.Transports != nil {
		return true
	}

	return false
}

// SetTransports gets a reference to the given []Transport and assigns it to the Transports field.
func (o *Transports) SetTransports(v []Transport) {
	o.Transports = v
}

func (o Transports) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Transports != nil {
		toSerialize["transports"] = o.Transports
	}
	return json.Marshal(toSerialize)
}

type NullableTransports struct {
	value *Transports
	isSet bool
}

func (v NullableTransports) Get() *Transports {
	return v.value
}

func (v *NullableTransports) Set(val *Transports) {
	v.value = val
	v.isSet = true
}

func (v NullableTransports) IsSet() bool {
	return v.isSet
}

func (v *NullableTransports) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransports(val *Transports) *NullableTransports {
	return &NullableTransports{value: val, isSet: true}
}

func (v NullableTransports) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransports) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
