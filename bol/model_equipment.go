/*
DCSA OpenAPI specification for Electronic Bill of Lading

API specification issued by DCSA.org.  For explanation to specific values or objects please refer to the <a href='https://dcsa.org/wp-content/uploads/2020/12/20201208-DCSA-P1-DCSA-Information-Model-v3.0-FINAL.pdf'>Information Model v3.0</a>  It is possible to use this API as a standalone API. In order to do so it is necessary to use the poll-endPoint - /v1/events  in order to poll event information.  It is recomended to implement the <a href='https://app.swaggerhub.com/apis/dcsaorg/DOCUMENTATION_EVENT_HUB'>DCSA Documentation Event Hub</a> in order to use the push model. Here events are pushed as they occur.

API version: 1.0.0
Contact: info@dcsa.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bol

import (
	"encoding/json"

	"github.com/hubbl-ai/dcsa/common"
)

// Equipment used for storing cargo in/on during transport. The equipment size/type is defined by the ISO 6346 code. The most common equipment size/type is 20'/40'/45' Dry Freight Container, but several different versions exist.
type Equipment struct {
	// The unique identifier for the equipment, which should follow the BIC ISO Container Identification Number where possible. According to ISO 6346, a container identification code consists of a 4-letter prefix and a 7-digit number (composed of a 3-letter owner code, a category identifier, a serial number, and a check-digit). If a container does not comply with ISO 6346, it is suggested to follow Recommendation #2 “Container with non-ISO identification” from SMDG.
	EquipmentReference string `json:"equipmentReference"`
	// Unique code for the different equipment size/type used for transporting commodities. The code is a concatenation of ISO Equipment Size Code and ISO Equipment Type Code A and follows the ISO 6346 standard.
	ISOEquipmentCode *string `json:"ISOEquipmentCode,omitempty"`
	// The weight of an empty container (gross container weight).
	TareWeight *float32           `json:"tareWeight,omitempty"`
	WeightUnit *common.WeightUnit `json:"weightUnit,omitempty"`
	// Indicates whether the container is shipper owned (SOC).
	IsShipperOwned bool `json:"isShipperOwned"`
}

// NewEquipment instantiates a new Equipment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEquipment(equipmentReference string, isShipperOwned bool) *Equipment {
	this := Equipment{}
	this.EquipmentReference = equipmentReference
	this.IsShipperOwned = isShipperOwned
	return &this
}

// NewEquipmentWithDefaults instantiates a new Equipment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEquipmentWithDefaults() *Equipment {
	this := Equipment{}
	return &this
}

// GetEquipmentReference returns the EquipmentReference field value
func (o *Equipment) GetEquipmentReference() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EquipmentReference
}

// GetEquipmentReferenceOk returns a tuple with the EquipmentReference field value
// and a boolean to check if the value has been set.
func (o *Equipment) GetEquipmentReferenceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EquipmentReference, true
}

// SetEquipmentReference sets field value
func (o *Equipment) SetEquipmentReference(v string) {
	o.EquipmentReference = v
}

// GetISOEquipmentCode returns the ISOEquipmentCode field value if set, zero value otherwise.
func (o *Equipment) GetISOEquipmentCode() string {
	if o == nil || o.ISOEquipmentCode == nil {
		var ret string
		return ret
	}
	return *o.ISOEquipmentCode
}

// GetISOEquipmentCodeOk returns a tuple with the ISOEquipmentCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Equipment) GetISOEquipmentCodeOk() (*string, bool) {
	if o == nil || o.ISOEquipmentCode == nil {
		return nil, false
	}
	return o.ISOEquipmentCode, true
}

// HasISOEquipmentCode returns a boolean if a field has been set.
func (o *Equipment) HasISOEquipmentCode() bool {
	if o != nil && o.ISOEquipmentCode != nil {
		return true
	}

	return false
}

// SetISOEquipmentCode gets a reference to the given string and assigns it to the ISOEquipmentCode field.
func (o *Equipment) SetISOEquipmentCode(v string) {
	o.ISOEquipmentCode = &v
}

// GetTareWeight returns the TareWeight field value if set, zero value otherwise.
func (o *Equipment) GetTareWeight() float32 {
	if o == nil || o.TareWeight == nil {
		var ret float32
		return ret
	}
	return *o.TareWeight
}

// GetTareWeightOk returns a tuple with the TareWeight field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Equipment) GetTareWeightOk() (*float32, bool) {
	if o == nil || o.TareWeight == nil {
		return nil, false
	}
	return o.TareWeight, true
}

// HasTareWeight returns a boolean if a field has been set.
func (o *Equipment) HasTareWeight() bool {
	if o != nil && o.TareWeight != nil {
		return true
	}

	return false
}

// SetTareWeight gets a reference to the given float32 and assigns it to the TareWeight field.
func (o *Equipment) SetTareWeight(v float32) {
	o.TareWeight = &v
}

// GetWeightUnit returns the WeightUnit field value if set, zero value otherwise.
func (o *Equipment) GetWeightUnit() common.WeightUnit {
	if o == nil || o.WeightUnit == nil {
		var ret common.WeightUnit
		return ret
	}
	return *o.WeightUnit
}

// GetWeightUnitOk returns a tuple with the WeightUnit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Equipment) GetWeightUnitOk() (*common.WeightUnit, bool) {
	if o == nil || o.WeightUnit == nil {
		return nil, false
	}
	return o.WeightUnit, true
}

// HasWeightUnit returns a boolean if a field has been set.
func (o *Equipment) HasWeightUnit() bool {
	if o != nil && o.WeightUnit != nil {
		return true
	}

	return false
}

// SetWeightUnit gets a reference to the given WeightUnit and assigns it to the WeightUnit field.
func (o *Equipment) SetWeightUnit(v common.WeightUnit) {
	o.WeightUnit = &v
}

// GetIsShipperOwned returns the IsShipperOwned field value
func (o *Equipment) GetIsShipperOwned() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsShipperOwned
}

// GetIsShipperOwnedOk returns a tuple with the IsShipperOwned field value
// and a boolean to check if the value has been set.
func (o *Equipment) GetIsShipperOwnedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsShipperOwned, true
}

// SetIsShipperOwned sets field value
func (o *Equipment) SetIsShipperOwned(v bool) {
	o.IsShipperOwned = v
}

func (o Equipment) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["equipmentReference"] = o.EquipmentReference
	}
	if o.ISOEquipmentCode != nil {
		toSerialize["ISOEquipmentCode"] = o.ISOEquipmentCode
	}
	if o.TareWeight != nil {
		toSerialize["tareWeight"] = o.TareWeight
	}
	if o.WeightUnit != nil {
		toSerialize["weightUnit"] = o.WeightUnit
	}
	if true {
		toSerialize["isShipperOwned"] = o.IsShipperOwned
	}
	return json.Marshal(toSerialize)
}

type NullableEquipment struct {
	value *Equipment
	isSet bool
}

func (v NullableEquipment) Get() *Equipment {
	return v.value
}

func (v *NullableEquipment) Set(val *Equipment) {
	v.value = val
	v.isSet = true
}

func (v NullableEquipment) IsSet() bool {
	return v.isSet
}

func (v *NullableEquipment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEquipment(val *Equipment) *NullableEquipment {
	return &NullableEquipment{value: val, isSet: true}
}

func (v NullableEquipment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEquipment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
