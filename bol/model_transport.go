/*
DCSA OpenAPI specification for Electronic Bill of Lading

API specification issued by DCSA.org.  For explanation to specific values or objects please refer to the <a href='https://dcsa.org/wp-content/uploads/2020/12/20201208-DCSA-P1-DCSA-Information-Model-v3.0-FINAL.pdf'>Information Model v3.0</a>  It is possible to use this API as a standalone API. In order to do so it is necessary to use the poll-endPoint - /v1/events  in order to poll event information.  It is recomended to implement the <a href='https://app.swaggerhub.com/apis/dcsaorg/DOCUMENTATION_EVENT_HUB'>DCSA Documentation Event Hub</a> in order to use the push model. Here events are pushed as they occur.

API version: 1.0.0
Contact: info@dcsa.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bol

import (
	"encoding/json"

	"github.com/hubbl-ai/dcsa/common"
)

// Transport A list of transports sorted by ShipmentTransport sequenceNumber
type Transport struct {
	LoadLocation      *Location `json:"loadLocation,omitempty"`
	DischargeLocation *Location `json:"dischargeLocation,omitempty"`
	// The planned date of departure.
	PlannedDepartureDate *string `json:"plannedDepartureDate,omitempty"`
	// The planned date of arrival.
	PlannedArrivalDate *string                 `json:"plannedArrivalDate,omitempty"`
	ModeOfTransport    *common.ModeOfTransport `json:"modeOfTransport,omitempty"`
	// The unique reference for a registered Vessel. The reference is the International Maritime Organisation (IMO) number, also sometimes known as the Lloyd&apos;s register code, which does not change during the lifetime of the vessel
	VesselIMONumber *string `json:"vesselIMONumber,omitempty"`
	// The vessel operator-specific identifier of the Voyage.
	CarrierVoyageNumber *string `json:"carrierVoyageNumber,omitempty"`
	// Indicator whether mode of transportation for pre-carriage (e.g. truck, barge, rail) is under shipper's responsibility
	IsUnderShippersResponsibility *bool `json:"isUnderShippersResponsibility,omitempty"`
}

// NewTransport instantiates a new Transport object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransport() *Transport {
	this := Transport{}
	return &this
}

// NewTransportWithDefaults instantiates a new Transport object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransportWithDefaults() *Transport {
	this := Transport{}
	return &this
}

// GetLoadLocation returns the LoadLocation field value if set, zero value otherwise.
func (o *Transport) GetLoadLocation() Location {
	if o == nil || o.LoadLocation == nil {
		var ret Location
		return ret
	}
	return *o.LoadLocation
}

// GetLoadLocationOk returns a tuple with the LoadLocation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transport) GetLoadLocationOk() (*Location, bool) {
	if o == nil || o.LoadLocation == nil {
		return nil, false
	}
	return o.LoadLocation, true
}

// HasLoadLocation returns a boolean if a field has been set.
func (o *Transport) HasLoadLocation() bool {
	if o != nil && o.LoadLocation != nil {
		return true
	}

	return false
}

// SetLoadLocation gets a reference to the given Location and assigns it to the LoadLocation field.
func (o *Transport) SetLoadLocation(v Location) {
	o.LoadLocation = &v
}

// GetDischargeLocation returns the DischargeLocation field value if set, zero value otherwise.
func (o *Transport) GetDischargeLocation() Location {
	if o == nil || o.DischargeLocation == nil {
		var ret Location
		return ret
	}
	return *o.DischargeLocation
}

// GetDischargeLocationOk returns a tuple with the DischargeLocation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transport) GetDischargeLocationOk() (*Location, bool) {
	if o == nil || o.DischargeLocation == nil {
		return nil, false
	}
	return o.DischargeLocation, true
}

// HasDischargeLocation returns a boolean if a field has been set.
func (o *Transport) HasDischargeLocation() bool {
	if o != nil && o.DischargeLocation != nil {
		return true
	}

	return false
}

// SetDischargeLocation gets a reference to the given Location and assigns it to the DischargeLocation field.
func (o *Transport) SetDischargeLocation(v Location) {
	o.DischargeLocation = &v
}

// GetPlannedDepartureDate returns the PlannedDepartureDate field value if set, zero value otherwise.
func (o *Transport) GetPlannedDepartureDate() string {
	if o == nil || o.PlannedDepartureDate == nil {
		var ret string
		return ret
	}
	return *o.PlannedDepartureDate
}

// GetPlannedDepartureDateOk returns a tuple with the PlannedDepartureDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transport) GetPlannedDepartureDateOk() (*string, bool) {
	if o == nil || o.PlannedDepartureDate == nil {
		return nil, false
	}
	return o.PlannedDepartureDate, true
}

// HasPlannedDepartureDate returns a boolean if a field has been set.
func (o *Transport) HasPlannedDepartureDate() bool {
	if o != nil && o.PlannedDepartureDate != nil {
		return true
	}

	return false
}

// SetPlannedDepartureDate gets a reference to the given string and assigns it to the PlannedDepartureDate field.
func (o *Transport) SetPlannedDepartureDate(v string) {
	o.PlannedDepartureDate = &v
}

// GetPlannedArrivalDate returns the PlannedArrivalDate field value if set, zero value otherwise.
func (o *Transport) GetPlannedArrivalDate() string {
	if o == nil || o.PlannedArrivalDate == nil {
		var ret string
		return ret
	}
	return *o.PlannedArrivalDate
}

// GetPlannedArrivalDateOk returns a tuple with the PlannedArrivalDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transport) GetPlannedArrivalDateOk() (*string, bool) {
	if o == nil || o.PlannedArrivalDate == nil {
		return nil, false
	}
	return o.PlannedArrivalDate, true
}

// HasPlannedArrivalDate returns a boolean if a field has been set.
func (o *Transport) HasPlannedArrivalDate() bool {
	if o != nil && o.PlannedArrivalDate != nil {
		return true
	}

	return false
}

// SetPlannedArrivalDate gets a reference to the given string and assigns it to the PlannedArrivalDate field.
func (o *Transport) SetPlannedArrivalDate(v string) {
	o.PlannedArrivalDate = &v
}

// GetModeOfTransport returns the ModeOfTransport field value if set, zero value otherwise.
func (o *Transport) GetModeOfTransport() common.ModeOfTransport {
	if o == nil || o.ModeOfTransport == nil {
		var ret common.ModeOfTransport
		return ret
	}
	return *o.ModeOfTransport
}

// GetModeOfTransportOk returns a tuple with the ModeOfTransport field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transport) GetModeOfTransportOk() (*common.ModeOfTransport, bool) {
	if o == nil || o.ModeOfTransport == nil {
		return nil, false
	}
	return o.ModeOfTransport, true
}

// HasModeOfTransport returns a boolean if a field has been set.
func (o *Transport) HasModeOfTransport() bool {
	if o != nil && o.ModeOfTransport != nil {
		return true
	}

	return false
}

// SetModeOfTransport gets a reference to the given ModeOfTransport and assigns it to the ModeOfTransport field.
func (o *Transport) SetModeOfTransport(v common.ModeOfTransport) {
	o.ModeOfTransport = &v
}

// GetVesselIMONumber returns the VesselIMONumber field value if set, zero value otherwise.
func (o *Transport) GetVesselIMONumber() string {
	if o == nil || o.VesselIMONumber == nil {
		var ret string
		return ret
	}
	return *o.VesselIMONumber
}

// GetVesselIMONumberOk returns a tuple with the VesselIMONumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transport) GetVesselIMONumberOk() (*string, bool) {
	if o == nil || o.VesselIMONumber == nil {
		return nil, false
	}
	return o.VesselIMONumber, true
}

// HasVesselIMONumber returns a boolean if a field has been set.
func (o *Transport) HasVesselIMONumber() bool {
	if o != nil && o.VesselIMONumber != nil {
		return true
	}

	return false
}

// SetVesselIMONumber gets a reference to the given string and assigns it to the VesselIMONumber field.
func (o *Transport) SetVesselIMONumber(v string) {
	o.VesselIMONumber = &v
}

// GetCarrierVoyageNumber returns the CarrierVoyageNumber field value if set, zero value otherwise.
func (o *Transport) GetCarrierVoyageNumber() string {
	if o == nil || o.CarrierVoyageNumber == nil {
		var ret string
		return ret
	}
	return *o.CarrierVoyageNumber
}

// GetCarrierVoyageNumberOk returns a tuple with the CarrierVoyageNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transport) GetCarrierVoyageNumberOk() (*string, bool) {
	if o == nil || o.CarrierVoyageNumber == nil {
		return nil, false
	}
	return o.CarrierVoyageNumber, true
}

// HasCarrierVoyageNumber returns a boolean if a field has been set.
func (o *Transport) HasCarrierVoyageNumber() bool {
	if o != nil && o.CarrierVoyageNumber != nil {
		return true
	}

	return false
}

// SetCarrierVoyageNumber gets a reference to the given string and assigns it to the CarrierVoyageNumber field.
func (o *Transport) SetCarrierVoyageNumber(v string) {
	o.CarrierVoyageNumber = &v
}

// GetIsUnderShippersResponsibility returns the IsUnderShippersResponsibility field value if set, zero value otherwise.
func (o *Transport) GetIsUnderShippersResponsibility() bool {
	if o == nil || o.IsUnderShippersResponsibility == nil {
		var ret bool
		return ret
	}
	return *o.IsUnderShippersResponsibility
}

// GetIsUnderShippersResponsibilityOk returns a tuple with the IsUnderShippersResponsibility field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transport) GetIsUnderShippersResponsibilityOk() (*bool, bool) {
	if o == nil || o.IsUnderShippersResponsibility == nil {
		return nil, false
	}
	return o.IsUnderShippersResponsibility, true
}

// HasIsUnderShippersResponsibility returns a boolean if a field has been set.
func (o *Transport) HasIsUnderShippersResponsibility() bool {
	if o != nil && o.IsUnderShippersResponsibility != nil {
		return true
	}

	return false
}

// SetIsUnderShippersResponsibility gets a reference to the given bool and assigns it to the IsUnderShippersResponsibility field.
func (o *Transport) SetIsUnderShippersResponsibility(v bool) {
	o.IsUnderShippersResponsibility = &v
}

func (o Transport) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.LoadLocation != nil {
		toSerialize["loadLocation"] = o.LoadLocation
	}
	if o.DischargeLocation != nil {
		toSerialize["dischargeLocation"] = o.DischargeLocation
	}
	if o.PlannedDepartureDate != nil {
		toSerialize["plannedDepartureDate"] = o.PlannedDepartureDate
	}
	if o.PlannedArrivalDate != nil {
		toSerialize["plannedArrivalDate"] = o.PlannedArrivalDate
	}
	if o.ModeOfTransport != nil {
		toSerialize["modeOfTransport"] = o.ModeOfTransport
	}
	if o.VesselIMONumber != nil {
		toSerialize["vesselIMONumber"] = o.VesselIMONumber
	}
	if o.CarrierVoyageNumber != nil {
		toSerialize["carrierVoyageNumber"] = o.CarrierVoyageNumber
	}
	if o.IsUnderShippersResponsibility != nil {
		toSerialize["isUnderShippersResponsibility"] = o.IsUnderShippersResponsibility
	}
	return json.Marshal(toSerialize)
}

type NullableTransport struct {
	value *Transport
	isSet bool
}

func (v NullableTransport) Get() *Transport {
	return v.value
}

func (v *NullableTransport) Set(val *Transport) {
	v.value = val
	v.isSet = true
}

func (v NullableTransport) IsSet() bool {
	return v.isSet
}

func (v *NullableTransport) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransport(val *Transport) *NullableTransport {
	return &NullableTransport{value: val, isSet: true}
}

func (v NullableTransport) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransport) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
