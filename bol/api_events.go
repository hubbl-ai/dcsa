/*
DCSA OpenAPI specification for Electronic Bill of Lading

API specification issued by DCSA.org.  For explanation to specific values or objects please refer to the <a href='https://dcsa.org/wp-content/uploads/2020/12/20201208-DCSA-P1-DCSA-Information-Model-v3.0-FINAL.pdf'>Information Model v3.0</a>  It is possible to use this API as a standalone API. In order to do so it is necessary to use the poll-endPoint - /v1/events  in order to poll event information.  It is recomended to implement the <a href='https://app.swaggerhub.com/apis/dcsaorg/DOCUMENTATION_EVENT_HUB'>DCSA Documentation Event Hub</a> in order to use the push model. Here events are pushed as they occur.

API version: 1.0.0
Contact: info@dcsa.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bol

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"

	"github.com/hubbl-ai/dcsa/common"
)

// EventsAPIService EventsAPI service
type EventsAPIService service

type APIV1EventsGetRequest struct {
	ctx                        context.Context
	APIService                 *EventsAPIService
	transportDocumentReference string
	shipmentEventTypeCode      *[]ShipmentEventTypeCode
	carrierBookingReference    *string
	transportDocumentTypeCode  *[]common.TransportDocumentType
	limit                      *int32
	cursor                     *string
	aPIVersion                 *string
}

// The status of the document in the process to filter by. Possible values are - RECE (Received) - DRFT (Drafted) - PENA (Pending Approval) - PENU (Pending Update) - REJE (Rejected) - APPR (Approved) - ISSU (Issued) - SURR (Surrendered) - SUBM (Submitted) - VOID (Void) - CONF (Confirmed)  It is possible to select multiple values by comma (,) separating them. For multiple values the OR-operator is used. For example &lt;i&gt;shipmentEventTypeCode&#x3D;RECE,DRFT&lt;/i&gt;  Matches &lt;b&gt;both&lt;/b&gt; Received (RECE) and Drafted (DRFT) shipment events.  Default is all shipmentEventTypeCodes.  This filter is only relevant when filtering on ShipmentEvents
func (r APIV1EventsGetRequest) ShipmentEventTypeCode(shipmentEventTypeCode []ShipmentEventTypeCode) APIV1EventsGetRequest {
	r.shipmentEventTypeCode = &shipmentEventTypeCode
	return r
}

// A set of unique characters provided by carrier to identify a booking.  Specifying this filter will only return events related to this particular carrierBookingReference.
func (r APIV1EventsGetRequest) CarrierBookingReference(carrierBookingReference string) APIV1EventsGetRequest {
	r.carrierBookingReference = &carrierBookingReference
	return r
}

// Specifies the type of the transport document (a Bill of Lading (BOL) or a Sea Waybill (SWB)) to filter by.  Default is both.
func (r APIV1EventsGetRequest) TransportDocumentTypeCode(transportDocumentTypeCode []common.TransportDocumentType) APIV1EventsGetRequest {
	r.transportDocumentTypeCode = &transportDocumentTypeCode
	return r
}

// Maximum number of items to return.
func (r APIV1EventsGetRequest) Limit(limit int32) APIV1EventsGetRequest {
	r.limit = &limit
	return r
}

// A server generated value to specify a specific point in a collection result, used for pagination.
func (r APIV1EventsGetRequest) Cursor(cursor string) APIV1EventsGetRequest {
	r.cursor = &cursor
	return r
}

// An API-Version header MAY be added to the request (optional); if added it MUST only contain MAJOR version. API-Version header MUST be aligned with the URI version.
func (r APIV1EventsGetRequest) APIVersion(aPIVersion string) APIV1EventsGetRequest {
	r.aPIVersion = &aPIVersion
	return r
}

func (r APIV1EventsGetRequest) Execute() ([]ShipmentEvent, *http.Response, error) {
	return r.APIService.V1EventsGetExecute(r)
}

/*
V1EventsGet Get Shipment events

Retrieves Shipment events. The default sort order is by <i>eventCreatedDateTime</i> in descending order (DESC)

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param transportDocumentReference The transportDocumentReference of the transportDocument
	@return APIV1EventsGetRequest
*/
func (a *EventsAPIService) V1EventsGet(ctx context.Context, transportDocumentReference string) APIV1EventsGetRequest {
	return APIV1EventsGetRequest{
		APIService:                 a,
		ctx:                        ctx,
		transportDocumentReference: transportDocumentReference,
	}
}

// Execute executes the request
//
//	@return []ShipmentEvent
func (a *EventsAPIService) V1EventsGetExecute(r APIV1EventsGetRequest) ([]ShipmentEvent, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []ShipmentEvent
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EventsAPIService.V1EventsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/events/"
	localVarPath = strings.Replace(localVarPath, "{"+"transportDocumentReference"+"}", url.PathEscape(parameterToString(r.transportDocumentReference, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.transportDocumentReference) > 20 {
		return localVarReturnValue, nil, reportError("transportDocumentReference must have less than 20 elements")
	}

	if r.shipmentEventTypeCode != nil {
		localVarQueryParams.Add("shipmentEventTypeCode", parameterToString(*r.shipmentEventTypeCode, "csv"))
	}
	if r.carrierBookingReference != nil {
		localVarQueryParams.Add("carrierBookingReference", parameterToString(*r.carrierBookingReference, ""))
	}
	if r.transportDocumentTypeCode != nil {
		localVarQueryParams.Add("transportDocumentTypeCode", parameterToString(*r.transportDocumentTypeCode, "csv"))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.cursor != nil {
		localVarQueryParams.Add("cursor", parameterToString(*r.cursor, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.aPIVersion != nil {
		localVarHeaderParams["API-Version"] = parameterToString(*r.aPIVersion, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v ModelError
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
