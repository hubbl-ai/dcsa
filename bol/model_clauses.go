/*
DCSA OpenAPI specification for Electronic Bill of Lading

API specification issued by DCSA.org.  For explanation to specific values or objects please refer to the <a href='https://dcsa.org/wp-content/uploads/2020/12/20201208-DCSA-P1-DCSA-Information-Model-v3.0-FINAL.pdf'>Information Model v3.0</a>  It is possible to use this API as a standalone API. In order to do so it is necessary to use the poll-endPoint - /v1/events  in order to poll event information.  It is recomended to implement the <a href='https://app.swaggerhub.com/apis/dcsaorg/DOCUMENTATION_EVENT_HUB'>DCSA Documentation Event Hub</a> in order to use the push model. Here events are pushed as they occur.

API version: 1.0.0
Contact: info@dcsa.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bol

import (
	"encoding/json"
)

// Clauses struct for Clauses
type Clauses struct {
	Clauses []Clause `json:"clauses,omitempty"`
}

// NewClauses instantiates a new Clauses object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClauses() *Clauses {
	this := Clauses{}
	return &this
}

// NewClausesWithDefaults instantiates a new Clauses object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClausesWithDefaults() *Clauses {
	this := Clauses{}
	return &this
}

// GetClauses returns the Clauses field value if set, zero value otherwise.
func (o *Clauses) GetClauses() []Clause {
	if o == nil || o.Clauses == nil {
		var ret []Clause
		return ret
	}
	return o.Clauses
}

// GetClausesOk returns a tuple with the Clauses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Clauses) GetClausesOk() ([]Clause, bool) {
	if o == nil || o.Clauses == nil {
		return nil, false
	}
	return o.Clauses, true
}

// HasClauses returns a boolean if a field has been set.
func (o *Clauses) HasClauses() bool {
	if o != nil && o.Clauses != nil {
		return true
	}

	return false
}

// SetClauses gets a reference to the given []Clause and assigns it to the Clauses field.
func (o *Clauses) SetClauses(v []Clause) {
	o.Clauses = v
}

func (o Clauses) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Clauses != nil {
		toSerialize["clauses"] = o.Clauses
	}
	return json.Marshal(toSerialize)
}

type NullableClauses struct {
	value *Clauses
	isSet bool
}

func (v NullableClauses) Get() *Clauses {
	return v.value
}

func (v *NullableClauses) Set(val *Clauses) {
	v.value = val
	v.isSet = true
}

func (v NullableClauses) IsSet() bool {
	return v.isSet
}

func (v *NullableClauses) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClauses(val *Clauses) *NullableClauses {
	return &NullableClauses{value: val, isSet: true}
}

func (v NullableClauses) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClauses) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
