/*
DCSA OpenAPI specification for Electronic Bill of Lading

API specification issued by DCSA.org.  For explanation to specific values or objects please refer to the <a href='https://dcsa.org/wp-content/uploads/2020/12/20201208-DCSA-P1-DCSA-Information-Model-v3.0-FINAL.pdf'>Information Model v3.0</a>  It is possible to use this API as a standalone API. In order to do so it is necessary to use the poll-endPoint - /v1/events  in order to poll event information.  It is recomended to implement the <a href='https://app.swaggerhub.com/apis/dcsaorg/DOCUMENTATION_EVENT_HUB'>DCSA Documentation Event Hub</a> in order to use the push model. Here events are pushed as they occur.

API version: 1.0.0
Contact: info@dcsa.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bol

import (
	"encoding/json"
	"fmt"
)

// LocationType Links to the Location Type Code defined by DCSA.
// - PRE (Place of Receipt)
// - PDE (Place of Delivery)
// - PCF (Pre-carriage From)
// - OIR (Onward In-land Routing)
// - POL (Port of Loading)
// - POD (Port of Discharge)
// - ORI (Origin of goods)
// - DRL (Depot release location)
type LocationType string

// List of locationType
const (
	LocationTypePlaceOfReceipt       LocationType = "PRE"
	LocationTypePlaceOfDelivery      LocationType = "PDE"
	LocationTypePreCarriageFrom      LocationType = "PCF"
	LocationTypeOnwardInLandRouting  LocationType = "OIR"
	LocationTypePortOfLoading        LocationType = "POL"
	LocationTypePortOfDischarge      LocationType = "POD"
	LocationTypeOriginOfGoods        LocationType = "ORI"
	LocationTypeDepotReleaseLocation LocationType = "DRL"
)

// All allowed values of LocationType enum
var AllowedLocationTypeEnumValues = []LocationType{
	LocationTypePlaceOfReceipt,
	LocationTypePlaceOfDelivery,
	LocationTypePreCarriageFrom,
	LocationTypeOnwardInLandRouting,
	LocationTypePortOfLoading,
	LocationTypePortOfDischarge,
	LocationTypeOriginOfGoods,
	LocationTypeDepotReleaseLocation,
}

func (v *LocationType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := LocationType(value)
	for _, existing := range AllowedLocationTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid LocationType", value)
}

// NewLocationTypeFromValue returns a pointer to a valid LocationType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewLocationTypeFromValue(v string) (*LocationType, error) {
	ev := LocationType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for LocationType: valid values are %v", v, AllowedLocationTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v LocationType) IsValid() bool {
	for _, existing := range AllowedLocationTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to locationType value
func (v LocationType) Ptr() *LocationType {
	return &v
}

type NullableLocationType struct {
	value *LocationType
	isSet bool
}

func (v NullableLocationType) Get() *LocationType {
	return v.value
}

func (v *NullableLocationType) Set(val *LocationType) {
	v.value = val
	v.isSet = true
}

func (v NullableLocationType) IsSet() bool {
	return v.isSet
}

func (v *NullableLocationType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLocationType(val *LocationType) *NullableLocationType {
	return &NullableLocationType{value: val, isSet: true}
}

func (v NullableLocationType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLocationType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
