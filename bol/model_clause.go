/*
DCSA OpenAPI specification for Electronic Bill of Lading

API specification issued by DCSA.org.  For explanation to specific values or objects please refer to the <a href='https://dcsa.org/wp-content/uploads/2020/12/20201208-DCSA-P1-DCSA-Information-Model-v3.0-FINAL.pdf'>Information Model v3.0</a>  It is possible to use this API as a standalone API. In order to do so it is necessary to use the poll-endPoint - /v1/events  in order to poll event information.  It is recomended to implement the <a href='https://app.swaggerhub.com/apis/dcsaorg/DOCUMENTATION_EVENT_HUB'>DCSA Documentation Event Hub</a> in order to use the push model. Here events are pushed as they occur.

API version: 1.0.0
Contact: info@dcsa.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bol

import (
	"encoding/json"
)

// Clause comprises clauses, added by the carrier to the Transport Document, which are subject to local rules/guidelines or certain mandatory information required to be shared with the customer. Usually printed below the cargo description.
type Clause struct {
	// The content of the clause.
	ClauseContent *string `json:"clauseContent,omitempty"`
}

// NewClause instantiates a new Clause object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClause() *Clause {
	this := Clause{}
	return &this
}

// NewClauseWithDefaults instantiates a new Clause object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClauseWithDefaults() *Clause {
	this := Clause{}
	return &this
}

// GetClauseContent returns the ClauseContent field value if set, zero value otherwise.
func (o *Clause) GetClauseContent() string {
	if o == nil || o.ClauseContent == nil {
		var ret string
		return ret
	}
	return *o.ClauseContent
}

// GetClauseContentOk returns a tuple with the ClauseContent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Clause) GetClauseContentOk() (*string, bool) {
	if o == nil || o.ClauseContent == nil {
		return nil, false
	}
	return o.ClauseContent, true
}

// HasClauseContent returns a boolean if a field has been set.
func (o *Clause) HasClauseContent() bool {
	if o != nil && o.ClauseContent != nil {
		return true
	}

	return false
}

// SetClauseContent gets a reference to the given string and assigns it to the ClauseContent field.
func (o *Clause) SetClauseContent(v string) {
	o.ClauseContent = &v
}

func (o Clause) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ClauseContent != nil {
		toSerialize["clauseContent"] = o.ClauseContent
	}
	return json.Marshal(toSerialize)
}

type NullableClause struct {
	value *Clause
	isSet bool
}

func (v NullableClause) Get() *Clause {
	return v.value
}

func (v *NullableClause) Set(val *Clause) {
	v.value = val
	v.isSet = true
}

func (v NullableClause) IsSet() bool {
	return v.isSet
}

func (v *NullableClause) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClause(val *Clause) *NullableClause {
	return &NullableClause{value: val, isSet: true}
}

func (v NullableClause) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClause) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
