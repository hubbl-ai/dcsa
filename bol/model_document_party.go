/*
DCSA OpenAPI specification for Electronic Bill of Lading

API specification issued by DCSA.org.  For explanation to specific values or objects please refer to the <a href='https://dcsa.org/wp-content/uploads/2020/12/20201208-DCSA-P1-DCSA-Information-Model-v3.0-FINAL.pdf'>Information Model v3.0</a>  It is possible to use this API as a standalone API. In order to do so it is necessary to use the poll-endPoint - /v1/events  in order to poll event information.  It is recomended to implement the <a href='https://app.swaggerhub.com/apis/dcsaorg/DOCUMENTATION_EVENT_HUB'>DCSA Documentation Event Hub</a> in order to use the push model. Here events are pushed as they occur.

API version: 1.0.0
Contact: info@dcsa.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bol

import (
	"encoding/json"

	"github.com/hubbl-ai/dcsa/common"
)

// DocumentParty stores the parties involved in the transport document.
type DocumentParty struct {
	Party               *PartyNoID             `json:"party,omitempty"`
	PartyFunction       common.PartyFunction   `json:"partyFunction"`
	DisplayedAddress    []string               `json:"displayedAddress,omitempty"`
	PartyContactDetails map[string]interface{} `json:"partyContactDetails"`
	// Used to decide whether the party will be notified of the arrival of the cargo.
	IsToBeNotified bool `json:"isToBeNotified"`
}

// NewDocumentParty instantiates a new DocumentParty object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDocumentParty(partyFunction common.PartyFunction, partyContactDetails map[string]interface{}, isToBeNotified bool) *DocumentParty {
	this := DocumentParty{}
	this.PartyFunction = partyFunction
	this.PartyContactDetails = partyContactDetails
	this.IsToBeNotified = isToBeNotified
	return &this
}

// NewDocumentPartyWithDefaults instantiates a new DocumentParty object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDocumentPartyWithDefaults() *DocumentParty {
	this := DocumentParty{}
	return &this
}

// GetParty returns the Party field value if set, zero value otherwise.
func (o *DocumentParty) GetParty() PartyNoID {
	if o == nil || o.Party == nil {
		var ret PartyNoID
		return ret
	}
	return *o.Party
}

// GetPartyOk returns a tuple with the Party field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentParty) GetPartyOk() (*PartyNoID, bool) {
	if o == nil || o.Party == nil {
		return nil, false
	}
	return o.Party, true
}

// HasParty returns a boolean if a field has been set.
func (o *DocumentParty) HasParty() bool {
	if o != nil && o.Party != nil {
		return true
	}

	return false
}

// SetParty gets a reference to the given PartyNoID and assigns it to the Party field.
func (o *DocumentParty) SetParty(v PartyNoID) {
	o.Party = &v
}

// GetPartyFunction returns the PartyFunction field value
func (o *DocumentParty) GetPartyFunction() common.PartyFunction {
	if o == nil {
		var ret common.PartyFunction
		return ret
	}

	return o.PartyFunction
}

// GetPartyFunctionOk returns a tuple with the PartyFunction field value
// and a boolean to check if the value has been set.
func (o *DocumentParty) GetPartyFunctionOk() (*common.PartyFunction, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PartyFunction, true
}

// SetPartyFunction sets field value
func (o *DocumentParty) SetPartyFunction(v common.PartyFunction) {
	o.PartyFunction = v
}

// GetDisplayedAddress returns the DisplayedAddress field value if set, zero value otherwise.
func (o *DocumentParty) GetDisplayedAddress() []string {
	if o == nil || o.DisplayedAddress == nil {
		var ret []string
		return ret
	}
	return o.DisplayedAddress
}

// GetDisplayedAddressOk returns a tuple with the DisplayedAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentParty) GetDisplayedAddressOk() ([]string, bool) {
	if o == nil || o.DisplayedAddress == nil {
		return nil, false
	}
	return o.DisplayedAddress, true
}

// HasDisplayedAddress returns a boolean if a field has been set.
func (o *DocumentParty) HasDisplayedAddress() bool {
	if o != nil && o.DisplayedAddress != nil {
		return true
	}

	return false
}

// SetDisplayedAddress gets a reference to the given []string and assigns it to the DisplayedAddress field.
func (o *DocumentParty) SetDisplayedAddress(v []string) {
	o.DisplayedAddress = v
}

// GetPartyContactDetails returns the PartyContactDetails field value
func (o *DocumentParty) GetPartyContactDetails() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.PartyContactDetails
}

// GetPartyContactDetailsOk returns a tuple with the PartyContactDetails field value
// and a boolean to check if the value has been set.
func (o *DocumentParty) GetPartyContactDetailsOk() (*map[string]interface{}, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PartyContactDetails, true
}

// SetPartyContactDetails sets field value
func (o *DocumentParty) SetPartyContactDetails(v map[string]interface{}) {
	o.PartyContactDetails = v
}

// GetIsToBeNotified returns the IsToBeNotified field value
func (o *DocumentParty) GetIsToBeNotified() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsToBeNotified
}

// GetIsToBeNotifiedOk returns a tuple with the IsToBeNotified field value
// and a boolean to check if the value has been set.
func (o *DocumentParty) GetIsToBeNotifiedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsToBeNotified, true
}

// SetIsToBeNotified sets field value
func (o *DocumentParty) SetIsToBeNotified(v bool) {
	o.IsToBeNotified = v
}

func (o DocumentParty) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Party != nil {
		toSerialize["party"] = o.Party
	}
	if true {
		toSerialize["partyFunction"] = o.PartyFunction
	}
	if o.DisplayedAddress != nil {
		toSerialize["displayedAddress"] = o.DisplayedAddress
	}
	if true {
		toSerialize["partyContactDetails"] = o.PartyContactDetails
	}
	if true {
		toSerialize["isToBeNotified"] = o.IsToBeNotified
	}
	return json.Marshal(toSerialize)
}

type NullableDocumentParty struct {
	value *DocumentParty
	isSet bool
}

func (v NullableDocumentParty) Get() *DocumentParty {
	return v.value
}

func (v *NullableDocumentParty) Set(val *DocumentParty) {
	v.value = val
	v.isSet = true
}

func (v NullableDocumentParty) IsSet() bool {
	return v.isSet
}

func (v *NullableDocumentParty) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDocumentParty(val *DocumentParty) *NullableDocumentParty {
	return &NullableDocumentParty{value: val, isSet: true}
}

func (v NullableDocumentParty) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDocumentParty) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
