/*
DCSA OpenAPI specification for Electronic Bill of Lading

API specification issued by DCSA.org.  For explanation to specific values or objects please refer to the <a href='https://dcsa.org/wp-content/uploads/2020/12/20201208-DCSA-P1-DCSA-Information-Model-v3.0-FINAL.pdf'>Information Model v3.0</a>  It is possible to use this API as a standalone API. In order to do so it is necessary to use the poll-endPoint - /v1/events  in order to poll event information.  It is recomended to implement the <a href='https://app.swaggerhub.com/apis/dcsaorg/DOCUMENTATION_EVENT_HUB'>DCSA Documentation Event Hub</a> in order to use the push model. Here events are pushed as they occur.

API version: 1.0.0
Contact: info@dcsa.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bol

import (
	"encoding/json"
)

// Seals struct for Seals
type Seals struct {
	Seals []Seal `json:"seals,omitempty"`
}

// NewSeals instantiates a new Seals object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSeals() *Seals {
	this := Seals{}
	return &this
}

// NewSealsWithDefaults instantiates a new Seals object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSealsWithDefaults() *Seals {
	this := Seals{}
	return &this
}

// GetSeals returns the Seals field value if set, zero value otherwise.
func (o *Seals) GetSeals() []Seal {
	if o == nil || o.Seals == nil {
		var ret []Seal
		return ret
	}
	return o.Seals
}

// GetSealsOk returns a tuple with the Seals field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Seals) GetSealsOk() ([]Seal, bool) {
	if o == nil || o.Seals == nil {
		return nil, false
	}
	return o.Seals, true
}

// HasSeals returns a boolean if a field has been set.
func (o *Seals) HasSeals() bool {
	if o != nil && o.Seals != nil {
		return true
	}

	return false
}

// SetSeals gets a reference to the given []Seal and assigns it to the Seals field.
func (o *Seals) SetSeals(v []Seal) {
	o.Seals = v
}

func (o Seals) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Seals != nil {
		toSerialize["seals"] = o.Seals
	}
	return json.Marshal(toSerialize)
}

type NullableSeals struct {
	value *Seals
	isSet bool
}

func (v NullableSeals) Get() *Seals {
	return v.value
}

func (v *NullableSeals) Set(val *Seals) {
	v.value = val
	v.isSet = true
}

func (v NullableSeals) IsSet() bool {
	return v.isSet
}

func (v *NullableSeals) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSeals(val *Seals) *NullableSeals {
	return &NullableSeals{value: val, isSet: true}
}

func (v NullableSeals) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSeals) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
