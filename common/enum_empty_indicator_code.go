/*
DCSA Components

Common components for DCSA APIs and Domains. This Domain maintains common SimpleTypes, Headers and parameters used throughout all DCSA APIs and Domains.  For a history of changes in this domain - please check [GitHub](https://github.com/dcsaorg/DCSA-OpenAPI/tree/master/domain/dcsa#v202). Please also [create a GitHub issue](https://github.com/dcsaorg/DCSA-OpenAPI/issues/new) if you have any questions/comments.

API version: 2.0.2
Contact: info@dcsa.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package common

import (
	"encoding/json"
	"fmt"
)

// EmptyIndicatorCode Code to denote whether the equipment is empty or laden.
type EmptyIndicatorCode string

// List of emptyIndicatorCode
const (
	EmptyIndicatorEmpty EmptyIndicatorCode = "EMPTY"
	EmptyIndicatorLaden EmptyIndicatorCode = "LADEN"
)

// All allowed values of EmptyIndicatorCode enum
var AllowedEmptyIndicatorCodeEnumValues = []EmptyIndicatorCode{
	EmptyIndicatorEmpty,
	EmptyIndicatorLaden,
}

func (v *EmptyIndicatorCode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EmptyIndicatorCode(value)
	for _, existing := range AllowedEmptyIndicatorCodeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EmptyIndicatorCode", value)
}

// NewEmptyIndicatorCodeFromValue returns a pointer to a valid EmptyIndicatorCode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEmptyIndicatorCodeFromValue(v string) (*EmptyIndicatorCode, error) {
	ev := EmptyIndicatorCode(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EmptyIndicatorCode: valid values are %v", v, AllowedEmptyIndicatorCodeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EmptyIndicatorCode) IsValid() bool {
	for _, existing := range AllowedEmptyIndicatorCodeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to emptyIndicatorCode value
func (v EmptyIndicatorCode) Ptr() *EmptyIndicatorCode {
	return &v
}

type NullableEmptyIndicatorCode struct {
	value *EmptyIndicatorCode
	isSet bool
}

func (v NullableEmptyIndicatorCode) Get() *EmptyIndicatorCode {
	return v.value
}

func (v *NullableEmptyIndicatorCode) Set(val *EmptyIndicatorCode) {
	v.value = val
	v.isSet = true
}

func (v NullableEmptyIndicatorCode) IsSet() bool {
	return v.isSet
}

func (v *NullableEmptyIndicatorCode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmptyIndicatorCode(val *EmptyIndicatorCode) *NullableEmptyIndicatorCode {
	return &NullableEmptyIndicatorCode{value: val, isSet: true}
}

func (v NullableEmptyIndicatorCode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmptyIndicatorCode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
