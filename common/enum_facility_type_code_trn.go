/*
DCSA Components

Common components for DCSA APIs and Domains. This Domain maintains common SimpleTypes, Headers and parameters used throughout all DCSA APIs and Domains.  For a history of changes in this domain - please check [GitHub](https://github.com/dcsaorg/DCSA-OpenAPI/tree/master/domain/dcsa#v202). Please also [create a GitHub issue](https://github.com/dcsaorg/DCSA-OpenAPI/issues/new) if you have any questions/comments.

API version: 2.0.2
Contact: info@dcsa.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package common

import (
	"encoding/json"
	"fmt"
)

// FacilityTypeCodeTRN A specialized version of the facilityCode to be used in TransportCalls. The code to identify the specific type of facility.
// - BOCR (Border crossing)
// - CLOC (Customer location)
// - COFS (Container freight station)
// - COYA (Deprecated use OFFD intead)
// - OFFD (Off dock storage)
// - DEPO (Depot)
// - INTE (Inland terminal)
// - POTE (Port terminal)
// - RAMP (Ramp)
type FacilityTypeCodeTRN string

// List of facilityTypeCodeTRN
const (
	FacilityTypeCodeTRNBorder                   FacilityTypeCodeTRN = "BOCR"
	FacilityTypeCodeTRNCustomer                 FacilityTypeCodeTRN = "CLOC"
	FacilityTypeCodeTRNContainerFreightStations FacilityTypeCodeTRN = "COFS"
	// FacilityTypeCodeTRNCOYA FacilityTypeCodeTRN = "COYA"
	FacilityTypeCodeTRNOffDock FacilityTypeCodeTRN = "OFFD"
	FacilityTypeCodeTRNDepot   FacilityTypeCodeTRN = "DEPO"
	FacilityTypeCodeTRNInland  FacilityTypeCodeTRN = "INTE"
	FacilityTypeCodeTRNPort    FacilityTypeCodeTRN = "POTE"
	FacilityTypeCodeTRNRamp    FacilityTypeCodeTRN = "RAMP"
)

// All allowed values of FacilityTypeCodeTRN enum
var AllowedFacilityTypeCodeTRNEnumValues = []FacilityTypeCodeTRN{
	"BOCR",
	"CLOC",
	"COFS",
	"COYA",
	"OFFD",
	"DEPO",
	"INTE",
	"POTE",
	"RAMP",
}

func (v *FacilityTypeCodeTRN) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FacilityTypeCodeTRN(value)
	for _, existing := range AllowedFacilityTypeCodeTRNEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FacilityTypeCodeTRN", value)
}

// NewFacilityTypeCodeTRNFromValue returns a pointer to a valid FacilityTypeCodeTRN
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFacilityTypeCodeTRNFromValue(v string) (*FacilityTypeCodeTRN, error) {
	ev := FacilityTypeCodeTRN(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FacilityTypeCodeTRN: valid values are %v", v, AllowedFacilityTypeCodeTRNEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FacilityTypeCodeTRN) IsValid() bool {
	for _, existing := range AllowedFacilityTypeCodeTRNEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to facilityTypeCodeTRN value
func (v FacilityTypeCodeTRN) Ptr() *FacilityTypeCodeTRN {
	return &v
}

type NullableFacilityTypeCodeTRN struct {
	value *FacilityTypeCodeTRN
	isSet bool
}

func (v NullableFacilityTypeCodeTRN) Get() *FacilityTypeCodeTRN {
	return v.value
}

func (v *NullableFacilityTypeCodeTRN) Set(val *FacilityTypeCodeTRN) {
	v.value = val
	v.isSet = true
}

func (v NullableFacilityTypeCodeTRN) IsSet() bool {
	return v.isSet
}

func (v *NullableFacilityTypeCodeTRN) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFacilityTypeCodeTRN(val *FacilityTypeCodeTRN) *NullableFacilityTypeCodeTRN {
	return &NullableFacilityTypeCodeTRN{value: val, isSet: true}
}

func (v NullableFacilityTypeCodeTRN) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFacilityTypeCodeTRN) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
