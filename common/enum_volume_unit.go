/*
DCSA OpenAPI specification for Electronic Bill of Lading

API specification issued by DCSA.org.  For explanation to specific values or objects please refer to the <a href='https://dcsa.org/wp-content/uploads/2020/12/20201208-DCSA-P1-DCSA-Information-Model-v3.0-FINAL.pdf'>Information Model v3.0</a>  It is possible to use this API as a standalone API. In order to do so it is necessary to use the poll-endPoint - /v1/events  in order to poll event information.  It is recomended to implement the <a href='https://app.swaggerhub.com/apis/dcsaorg/DOCUMENTATION_EVENT_HUB'>DCSA Documentation Event Hub</a> in order to use the push model. Here events are pushed as they occur.

API version: 1.0.0
Contact: info@dcsa.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package common

import (
	"encoding/json"
	"fmt"
)

// VolumeUnit The unit of measure which can be expressed in either imperial or metric terms
type VolumeUnit string

// List of volumeUnit
const (
	VolumeUnitCubicMeter VolumeUnit = "CBM"
	VolumeUnitCubicFoot  VolumeUnit = "CFT"
)

// All allowed values of VolumeUnit enum
var AllowedVolumeUnitEnumValues = []VolumeUnit{
	VolumeUnitCubicMeter,
	VolumeUnitCubicFoot,
}

func (v *VolumeUnit) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VolumeUnit(value)
	for _, existing := range AllowedVolumeUnitEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VolumeUnit", value)
}

// NewVolumeUnitFromValue returns a pointer to a valid VolumeUnit
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVolumeUnitFromValue(v string) (*VolumeUnit, error) {
	ev := VolumeUnit(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VolumeUnit: valid values are %v", v, AllowedVolumeUnitEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VolumeUnit) IsValid() bool {
	for _, existing := range AllowedVolumeUnitEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to volumeUnit value
func (v VolumeUnit) Ptr() *VolumeUnit {
	return &v
}

type NullableVolumeUnit struct {
	value *VolumeUnit
	isSet bool
}

func (v NullableVolumeUnit) Get() *VolumeUnit {
	return v.value
}

func (v *NullableVolumeUnit) Set(val *VolumeUnit) {
	v.value = val
	v.isSet = true
}

func (v NullableVolumeUnit) IsSet() bool {
	return v.isSet
}

func (v *NullableVolumeUnit) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVolumeUnit(val *VolumeUnit) *NullableVolumeUnit {
	return &NullableVolumeUnit{value: val, isSet: true}
}

func (v NullableVolumeUnit) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVolumeUnit) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
