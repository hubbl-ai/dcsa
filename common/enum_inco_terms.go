/*
DCSA Components

Common components for DCSA APIs and Domains. This Domain maintains common SimpleTypes, Headers and parameters used throughout all DCSA APIs and Domains.  For a history of changes in this domain - please check [GitHub](https://github.com/dcsaorg/DCSA-OpenAPI/tree/master/domain/dcsa#v202). Please also [create a GitHub issue](https://github.com/dcsaorg/DCSA-OpenAPI/issues/new) if you have any questions/comments.

API version: 2.0.2
Contact: info@dcsa.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package common

import (
	"encoding/json"
	"fmt"
)

// IncoTerms Transport obligations, costs and risks as agreed between buyer and seller. - FCA (Free Carrier) - FOB (Free on Board)
type IncoTerms string

// List of incoTerms
const (
	FCA IncoTerms = "FCA"
	FOB IncoTerms = "FOB"
)

// All allowed values of IncoTerms enum
var AllowedIncoTermsEnumValues = []IncoTerms{
	"FCA",
	"FOB",
}

func (v *IncoTerms) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := IncoTerms(value)
	for _, existing := range AllowedIncoTermsEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid IncoTerms", value)
}

// NewIncoTermsFromValue returns a pointer to a valid IncoTerms
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewIncoTermsFromValue(v string) (*IncoTerms, error) {
	ev := IncoTerms(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for IncoTerms: valid values are %v", v, AllowedIncoTermsEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v IncoTerms) IsValid() bool {
	for _, existing := range AllowedIncoTermsEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to incoTerms value
func (v IncoTerms) Ptr() *IncoTerms {
	return &v
}

type NullableIncoTerms struct {
	value *IncoTerms
	isSet bool
}

func (v NullableIncoTerms) Get() *IncoTerms {
	return v.value
}

func (v *NullableIncoTerms) Set(val *IncoTerms) {
	v.value = val
	v.isSet = true
}

func (v NullableIncoTerms) IsSet() bool {
	return v.isSet
}

func (v *NullableIncoTerms) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIncoTerms(val *IncoTerms) *NullableIncoTerms {
	return &NullableIncoTerms{value: val, isSet: true}
}

func (v NullableIncoTerms) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIncoTerms) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
