/*
DCSA Components

Common components for DCSA APIs and Domains. This Domain maintains common SimpleTypes, Headers and parameters used throughout all DCSA APIs and Domains.  For a history of changes in this domain - please check [GitHub](https://github.com/dcsaorg/DCSA-OpenAPI/tree/master/domain/dcsa#v202). Please also [create a GitHub issue](https://github.com/dcsaorg/DCSA-OpenAPI/issues/new) if you have any questions/comments.

API version: 2.0.2
Contact: info@dcsa.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package common

import (
	"encoding/json"
	"fmt"
)

// FacilityCodeListProvider The provider used for identifying the facility Code. Some facility codes are only defined in combination with an `UN Location Code` - BIC (Requires a UN Location Code) - SMDG (Requires a UN Location Code)
type FacilityCodeListProvider string

// List of facilityCodeListProvider
const (
	FacilityCodeListProviderBIC  FacilityCodeListProvider = "BIC"
	FacilityCodeListProviderSMDG FacilityCodeListProvider = "SMDG"
)

// All allowed values of FacilityCodeListProvider enum
var AllowedFacilityCodeListProviderEnumValues = []FacilityCodeListProvider{
	FacilityCodeListProviderBIC,
	FacilityCodeListProviderSMDG,
}

func (v *FacilityCodeListProvider) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FacilityCodeListProvider(value)
	for _, existing := range AllowedFacilityCodeListProviderEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FacilityCodeListProvider", value)
}

// NewFacilityCodeListProviderFromValue returns a pointer to a valid FacilityCodeListProvider
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFacilityCodeListProviderFromValue(v string) (*FacilityCodeListProvider, error) {
	ev := FacilityCodeListProvider(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FacilityCodeListProvider: valid values are %v", v, AllowedFacilityCodeListProviderEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FacilityCodeListProvider) IsValid() bool {
	for _, existing := range AllowedFacilityCodeListProviderEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to facilityCodeListProvider value
func (v FacilityCodeListProvider) Ptr() *FacilityCodeListProvider {
	return &v
}

type NullableFacilityCodeListProvider struct {
	value *FacilityCodeListProvider
	isSet bool
}

func (v NullableFacilityCodeListProvider) Get() *FacilityCodeListProvider {
	return v.value
}

func (v *NullableFacilityCodeListProvider) Set(val *FacilityCodeListProvider) {
	v.value = val
	v.isSet = true
}

func (v NullableFacilityCodeListProvider) IsSet() bool {
	return v.isSet
}

func (v *NullableFacilityCodeListProvider) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFacilityCodeListProvider(val *FacilityCodeListProvider) *NullableFacilityCodeListProvider {
	return &NullableFacilityCodeListProvider{value: val, isSet: true}
}

func (v NullableFacilityCodeListProvider) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFacilityCodeListProvider) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
