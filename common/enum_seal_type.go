/*
DCSA OpenAPI specification for Electronic Bill of Lading

API specification issued by DCSA.org.  For explanation to specific values or objects please refer to the <a href='https://dcsa.org/wp-content/uploads/2020/12/20201208-DCSA-P1-DCSA-Information-Model-v3.0-FINAL.pdf'>Information Model v3.0</a>  It is possible to use this API as a standalone API. In order to do so it is necessary to use the poll-endPoint - /v1/events  in order to poll event information.  It is recomended to implement the <a href='https://app.swaggerhub.com/apis/dcsaorg/DOCUMENTATION_EVENT_HUB'>DCSA Documentation Event Hub</a> in order to use the push model. Here events are pushed as they occur.

API version: 1.0.0
Contact: info@dcsa.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package common

import (
	"encoding/json"
	"fmt"
)

// SealType The type of seal. This attribute links to the Seal Type ID defined in the Seal Type reference data entity.
// - KLP (Keyless padlock)
// - BLT (Bolt)
// - WIR (Wire)
type SealType string

// List of sealType
const (
	SealTypePadlock SealType = "KLP" // Keyless padlock
	SealTypeBolt    SealType = "BLT" // Bolt
	SealTypeWire    SealType = "WIR" // Wire
)

// All allowed values of SealType enum
var AllowedSealTypeEnumValues = []SealType{
	SealTypePadlock,
	SealTypeBolt,
	SealTypeWire,
}

func (v *SealType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SealType(value)
	for _, existing := range AllowedSealTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SealType", value)
}

// NewSealTypeFromValue returns a pointer to a valid SealType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSealTypeFromValue(v string) (*SealType, error) {
	ev := SealType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SealType: valid values are %v", v, AllowedSealTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SealType) IsValid() bool {
	for _, existing := range AllowedSealTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to sealType value
func (v SealType) Ptr() *SealType {
	return &v
}

type NullableSealType struct {
	value *SealType
	isSet bool
}

func (v NullableSealType) Get() *SealType {
	return v.value
}

func (v *NullableSealType) Set(val *SealType) {
	v.value = val
	v.isSet = true
}

func (v NullableSealType) IsSet() bool {
	return v.isSet
}

func (v *NullableSealType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSealType(val *SealType) *NullableSealType {
	return &NullableSealType{value: val, isSet: true}
}

func (v NullableSealType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSealType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
