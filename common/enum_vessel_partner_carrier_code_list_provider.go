/*
DCSA Components

Common components for DCSA APIs and Domains. This Domain maintains common SimpleTypes, Headers and parameters used throughout all DCSA APIs and Domains.  For a history of changes in this domain - please check [GitHub](https://github.com/dcsaorg/DCSA-OpenAPI/tree/master/domain/dcsa#v202). Please also [create a GitHub issue](https://github.com/dcsaorg/DCSA-OpenAPI/issues/new) if you have any questions/comments.

API version: 2.0.2
Contact: info@dcsa.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package common

import (
	"encoding/json"
	"fmt"
)

// VesselPartnerCarrierCodeListProvider Identifies the code list provider used for the vessel operator and partner carrier codes. If \"vesselPartnerCarrierCode\" is populated, the code list provider field is to be populated as well.
type VesselPartnerCarrierCodeListProvider string

// List of vesselPartnerCarrierCodeListProvider
const (
	SMDG  VesselPartnerCarrierCodeListProvider = "SMDG"
	NMFTA VesselPartnerCarrierCodeListProvider = "NMFTA"
)

// All allowed values of VesselPartnerCarrierCodeListProvider enum
var AllowedVesselPartnerCarrierCodeListProviderEnumValues = []VesselPartnerCarrierCodeListProvider{
	"SMDG",
	"NMFTA",
}

func (v *VesselPartnerCarrierCodeListProvider) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VesselPartnerCarrierCodeListProvider(value)
	for _, existing := range AllowedVesselPartnerCarrierCodeListProviderEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VesselPartnerCarrierCodeListProvider", value)
}

// NewVesselPartnerCarrierCodeListProviderFromValue returns a pointer to a valid VesselPartnerCarrierCodeListProvider
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVesselPartnerCarrierCodeListProviderFromValue(v string) (*VesselPartnerCarrierCodeListProvider, error) {
	ev := VesselPartnerCarrierCodeListProvider(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VesselPartnerCarrierCodeListProvider: valid values are %v", v, AllowedVesselPartnerCarrierCodeListProviderEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VesselPartnerCarrierCodeListProvider) IsValid() bool {
	for _, existing := range AllowedVesselPartnerCarrierCodeListProviderEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to vesselPartnerCarrierCodeListProvider value
func (v VesselPartnerCarrierCodeListProvider) Ptr() *VesselPartnerCarrierCodeListProvider {
	return &v
}

type NullableVesselPartnerCarrierCodeListProvider struct {
	value *VesselPartnerCarrierCodeListProvider
	isSet bool
}

func (v NullableVesselPartnerCarrierCodeListProvider) Get() *VesselPartnerCarrierCodeListProvider {
	return v.value
}

func (v *NullableVesselPartnerCarrierCodeListProvider) Set(val *VesselPartnerCarrierCodeListProvider) {
	v.value = val
	v.isSet = true
}

func (v NullableVesselPartnerCarrierCodeListProvider) IsSet() bool {
	return v.isSet
}

func (v *NullableVesselPartnerCarrierCodeListProvider) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVesselPartnerCarrierCodeListProvider(val *VesselPartnerCarrierCodeListProvider) *NullableVesselPartnerCarrierCodeListProvider {
	return &NullableVesselPartnerCarrierCodeListProvider{value: val, isSet: true}
}

func (v NullableVesselPartnerCarrierCodeListProvider) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVesselPartnerCarrierCodeListProvider) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
