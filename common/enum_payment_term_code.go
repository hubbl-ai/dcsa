/*
DCSA Components

Common components for DCSA APIs and Domains. This Domain maintains common SimpleTypes, Headers and parameters used throughout all DCSA APIs and Domains.  For a history of changes in this domain - please check [GitHub](https://github.com/dcsaorg/DCSA-OpenAPI/tree/master/domain/dcsa#v202). Please also [create a GitHub issue](https://github.com/dcsaorg/DCSA-OpenAPI/issues/new) if you have any questions/comments.

API version: 2.0.2
Contact: info@dcsa.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package common

import (
	"encoding/json"
	"fmt"
)

// PaymentTermCode Indicates whether freight & charges are due for payment before the shipment is effected, practically before the transport document is released to shipper (Prepaid) or before the shipment is finalized meaning cargo released to consignee (Collect) - PRE (Prepaid) - COL (Collect)
type PaymentTermCode string

// List of paymentTermCode
const (
	PRE PaymentTermCode = "PRE"
	COL PaymentTermCode = "COL"
)

// All allowed values of PaymentTermCode enum
var AllowedPaymentTermCodeEnumValues = []PaymentTermCode{
	"PRE",
	"COL",
}

func (v *PaymentTermCode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PaymentTermCode(value)
	for _, existing := range AllowedPaymentTermCodeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PaymentTermCode", value)
}

// NewPaymentTermCodeFromValue returns a pointer to a valid PaymentTermCode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPaymentTermCodeFromValue(v string) (*PaymentTermCode, error) {
	ev := PaymentTermCode(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PaymentTermCode: valid values are %v", v, AllowedPaymentTermCodeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PaymentTermCode) IsValid() bool {
	for _, existing := range AllowedPaymentTermCodeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to paymentTermCode value
func (v PaymentTermCode) Ptr() *PaymentTermCode {
	return &v
}

type NullablePaymentTermCode struct {
	value *PaymentTermCode
	isSet bool
}

func (v NullablePaymentTermCode) Get() *PaymentTermCode {
	return v.value
}

func (v *NullablePaymentTermCode) Set(val *PaymentTermCode) {
	v.value = val
	v.isSet = true
}

func (v NullablePaymentTermCode) IsSet() bool {
	return v.isSet
}

func (v *NullablePaymentTermCode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePaymentTermCode(val *PaymentTermCode) *NullablePaymentTermCode {
	return &NullablePaymentTermCode{value: val, isSet: true}
}

func (v NullablePaymentTermCode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePaymentTermCode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
