/*
DCSA Components

Common components for DCSA APIs and Domains. This Domain maintains common SimpleTypes, Headers and parameters used throughout all DCSA APIs and Domains.  For a history of changes in this domain - please check [GitHub](https://github.com/dcsaorg/DCSA-OpenAPI/tree/master/domain/dcsa#v202). Please also [create a GitHub issue](https://github.com/dcsaorg/DCSA-OpenAPI/issues/new) if you have any questions/comments.

API version: 2.0.2
Contact: info@dcsa.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package common

import (
	"encoding/json"
	"fmt"
)

// TransportPlanStage Code qualifying a specific stage of transport e.g. pre-carriage, main carriage transport or on-carriage transport - PRC (Pre-Carriage) - MNC (Main Carriage Transport) - ONC (On-Carriage Transport)
type TransportPlanStage string

// List of transportPlanStage
const (
	PRC TransportPlanStage = "PRC"
	MNC TransportPlanStage = "MNC"
	ONC TransportPlanStage = "ONC"
)

// All allowed values of TransportPlanStage enum
var AllowedTransportPlanStageEnumValues = []TransportPlanStage{
	"PRC",
	"MNC",
	"ONC",
}

func (v *TransportPlanStage) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TransportPlanStage(value)
	for _, existing := range AllowedTransportPlanStageEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TransportPlanStage", value)
}

// NewTransportPlanStageFromValue returns a pointer to a valid TransportPlanStage
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTransportPlanStageFromValue(v string) (*TransportPlanStage, error) {
	ev := TransportPlanStage(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TransportPlanStage: valid values are %v", v, AllowedTransportPlanStageEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TransportPlanStage) IsValid() bool {
	for _, existing := range AllowedTransportPlanStageEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to transportPlanStage value
func (v TransportPlanStage) Ptr() *TransportPlanStage {
	return &v
}

type NullableTransportPlanStage struct {
	value *TransportPlanStage
	isSet bool
}

func (v NullableTransportPlanStage) Get() *TransportPlanStage {
	return v.value
}

func (v *NullableTransportPlanStage) Set(val *TransportPlanStage) {
	v.value = val
	v.isSet = true
}

func (v NullableTransportPlanStage) IsSet() bool {
	return v.isSet
}

func (v *NullableTransportPlanStage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransportPlanStage(val *TransportPlanStage) *NullableTransportPlanStage {
	return &NullableTransportPlanStage{value: val, isSet: true}
}

func (v NullableTransportPlanStage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransportPlanStage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
