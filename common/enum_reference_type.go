/*
DCSA Components

Common components for DCSA APIs and Domains. This Domain maintains common SimpleTypes, Headers and parameters used throughout all DCSA APIs and Domains.  For a history of changes in this domain - please check [GitHub](https://github.com/dcsaorg/DCSA-OpenAPI/tree/master/domain/dcsa#v202). Please also [create a GitHub issue](https://github.com/dcsaorg/DCSA-OpenAPI/issues/new) if you have any questions/comments.

API version: 2.0.2
Contact: info@dcsa.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package common

import (
	"encoding/json"
	"fmt"
)

// ReferenceType The reference type codes defined by DCSA. - FF (Freight Forwarder’s Reference) - SI (Shipper’s Reference) - PO (Purchase Order Reference) - CR (Customer’s Reference) - AAO (Consignee’s Reference) - ECR (Empty container release reference) - CSI (Customer shipment ID) - BPR (Booking party reference number) - BID (Booking Request ID) - EQ (Equipment Reference)  More details can be found on <a href=\"https://github.com/dcsaorg/DCSA-Information-Model/blob/master/datamodel/referencedata.d/referencetypes.csv\">GitHub</a>.
type ReferenceType string

// List of referenceType
const (
	FF  ReferenceType = "FF"
	SI  ReferenceType = "SI"
	PO  ReferenceType = "PO"
	CR  ReferenceType = "CR"
	AAO ReferenceType = "AAO"
	ECR ReferenceType = "ECR"
	CSI ReferenceType = "CSI"
	BPR ReferenceType = "BPR"
	BID ReferenceType = "BID"
	EQ  ReferenceType = "EQ"
)

// All allowed values of ReferenceType enum
var AllowedReferenceTypeEnumValues = []ReferenceType{
	"FF",
	"SI",
	"PO",
	"CR",
	"AAO",
	"ECR",
	"CSI",
	"BPR",
	"BID",
	"EQ",
}

func (v *ReferenceType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ReferenceType(value)
	for _, existing := range AllowedReferenceTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ReferenceType", value)
}

// NewReferenceTypeFromValue returns a pointer to a valid ReferenceType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewReferenceTypeFromValue(v string) (*ReferenceType, error) {
	ev := ReferenceType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ReferenceType: valid values are %v", v, AllowedReferenceTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ReferenceType) IsValid() bool {
	for _, existing := range AllowedReferenceTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to referenceType value
func (v ReferenceType) Ptr() *ReferenceType {
	return &v
}

type NullableReferenceType struct {
	value *ReferenceType
	isSet bool
}

func (v NullableReferenceType) Get() *ReferenceType {
	return v.value
}

func (v *NullableReferenceType) Set(val *ReferenceType) {
	v.value = val
	v.isSet = true
}

func (v NullableReferenceType) IsSet() bool {
	return v.isSet
}

func (v *NullableReferenceType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReferenceType(val *ReferenceType) *NullableReferenceType {
	return &NullableReferenceType{value: val, isSet: true}
}

func (v NullableReferenceType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReferenceType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
