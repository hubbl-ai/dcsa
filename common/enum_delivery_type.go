/*
DCSA Components

Common components for DCSA APIs and Domains. This Domain maintains common SimpleTypes, Headers and parameters used throughout all DCSA APIs and Domains.  For a history of changes in this domain - please check [GitHub](https://github.com/dcsaorg/DCSA-OpenAPI/tree/master/domain/dcsa#v202). Please also [create a GitHub issue](https://github.com/dcsaorg/DCSA-OpenAPI/issues/new) if you have any questions/comments.

API version: 2.0.2
Contact: info@dcsa.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package common

import (
	"encoding/json"
	"fmt"
)

// DeliveryType Indicates the type of service offered at Destination. Options are defined in the Receipt/Delivery entity. - CY (Container yard (incl. rail ramp)) - SD (Store Door) - CFS (Container Freight Station)
type DeliveryType string

// List of deliveryTypeAtDestination
const (
	DeliveryTypeContainerYard            DeliveryType = "CY"
	DeliveryTypeSD                       DeliveryType = "SD" // Not sure what this is
	DeliveryTypeContainerFreightStations DeliveryType = "CFS"
)

// All allowed values of DeliveryTypeAtDestination enum
var AllowedDeliveryTypeAtDestinationEnumValues = []DeliveryType{
	"CY",
	"SD",
	"CFS",
}

func (v *DeliveryType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DeliveryType(value)
	for _, existing := range AllowedDeliveryTypeAtDestinationEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DeliveryTypeAtDestination", value)
}

// NewDeliveryTypeAtDestinationFromValue returns a pointer to a valid DeliveryTypeAtDestination
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDeliveryTypeAtDestinationFromValue(v string) (*DeliveryType, error) {
	ev := DeliveryType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DeliveryTypeAtDestination: valid values are %v", v, AllowedDeliveryTypeAtDestinationEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DeliveryType) IsValid() bool {
	for _, existing := range AllowedDeliveryTypeAtDestinationEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to deliveryTypeAtDestination value
func (v DeliveryType) Ptr() *DeliveryType {
	return &v
}

type NullableDeliveryTypeAtDestination struct {
	value *DeliveryType
	isSet bool
}

func (v NullableDeliveryTypeAtDestination) Get() *DeliveryType {
	return v.value
}

func (v *NullableDeliveryTypeAtDestination) Set(val *DeliveryType) {
	v.value = val
	v.isSet = true
}

func (v NullableDeliveryTypeAtDestination) IsSet() bool {
	return v.isSet
}

func (v *NullableDeliveryTypeAtDestination) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeliveryTypeAtDestination(val *DeliveryType) *NullableDeliveryTypeAtDestination {
	return &NullableDeliveryTypeAtDestination{value: val, isSet: true}
}

func (v NullableDeliveryTypeAtDestination) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeliveryTypeAtDestination) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
