/*
DCSA OpenAPI specification for Electronic Bill of Lading

API specification issued by DCSA.org.  For explanation to specific values or objects please refer to the <a href='https://dcsa.org/wp-content/uploads/2020/12/20201208-DCSA-P1-DCSA-Information-Model-v3.0-FINAL.pdf'>Information Model v3.0</a>  It is possible to use this API as a standalone API. In order to do so it is necessary to use the poll-endPoint - /v1/events  in order to poll event information.  It is recomended to implement the <a href='https://app.swaggerhub.com/apis/dcsaorg/DOCUMENTATION_EVENT_HUB'>DCSA Documentation Event Hub</a> in order to use the push model. Here events are pushed as they occur.

API version: 1.0.0
Contact: info@dcsa.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package common

import (
	"encoding/json"
	"fmt"
)

// CargoMovementType Refers to the shipment term at the loading of the cargo into the container. Options are defined in the Cargo Movement Type entity.
type CargoMovementType string

// List of cargoMovementTypeAtOrigin
const (
	CargoMovementTypeFCL       CargoMovementType = "FCL"
	CargoMovementTypeLCL       CargoMovementType = "LCL"
	CargoMovementTypeBreakBulk CargoMovementType = "BB"
)

// All allowed values of CargoMovementTypeAtOrigin enum
var AllowedCargoMovementTypeAtOriginEnumValues = []CargoMovementType{
	CargoMovementTypeFCL,
	CargoMovementTypeLCL,
	CargoMovementTypeBreakBulk,
}

func (v *CargoMovementType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CargoMovementType(value)
	for _, existing := range AllowedCargoMovementTypeAtOriginEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CargoMovementTypeAtOrigin", value)
}

// NewCargoMovementTypeAtOriginFromValue returns a pointer to a valid CargoMovementTypeAtOrigin
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCargoMovementTypeAtOriginFromValue(v string) (*CargoMovementType, error) {
	ev := CargoMovementType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CargoMovementTypeAtOrigin: valid values are %v", v, AllowedCargoMovementTypeAtOriginEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CargoMovementType) IsValid() bool {
	for _, existing := range AllowedCargoMovementTypeAtOriginEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to cargoMovementTypeAtOrigin value
func (v CargoMovementType) Ptr() *CargoMovementType {
	return &v
}

type NullableCargoMovementTypeAtOrigin struct {
	value *CargoMovementType
	isSet bool
}

func (v NullableCargoMovementTypeAtOrigin) Get() *CargoMovementType {
	return v.value
}

func (v *NullableCargoMovementTypeAtOrigin) Set(val *CargoMovementType) {
	v.value = val
	v.isSet = true
}

func (v NullableCargoMovementTypeAtOrigin) IsSet() bool {
	return v.isSet
}

func (v *NullableCargoMovementTypeAtOrigin) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCargoMovementTypeAtOrigin(val *CargoMovementType) *NullableCargoMovementTypeAtOrigin {
	return &NullableCargoMovementTypeAtOrigin{value: val, isSet: true}
}

func (v NullableCargoMovementTypeAtOrigin) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCargoMovementTypeAtOrigin) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
