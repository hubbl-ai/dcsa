/*
DCSA Components

Common components for DCSA APIs and Domains. This Domain maintains common SimpleTypes, Headers and parameters used throughout all DCSA APIs and Domains.  For a history of changes in this domain - please check [GitHub](https://github.com/dcsaorg/DCSA-OpenAPI/tree/master/domain/dcsa#v202). Please also [create a GitHub issue](https://github.com/dcsaorg/DCSA-OpenAPI/issues/new) if you have any questions/comments.

API version: 2.0.2
Contact: info@dcsa.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package common

import (
	"encoding/json"
	"fmt"
)

// ValueAddedServiceCode Code of the value added service - SCON (Smart containers) - CINS (Cargo insurance) - SIOT (Smart IoT devices) - CDECL (Customs declaration) - SGUAR (Shipping guarantee) - UPPY (Upfront payment)
type ValueAddedServiceCode string

// List of valueAddedServiceCode
const (
	SCON  ValueAddedServiceCode = "SCON"
	CINS  ValueAddedServiceCode = "CINS"
	SIOT  ValueAddedServiceCode = "SIOT"
	CDECL ValueAddedServiceCode = "CDECL"
	SGUAR ValueAddedServiceCode = "SGUAR"
	UPPY  ValueAddedServiceCode = "UPPY"
)

// All allowed values of ValueAddedServiceCode enum
var AllowedValueAddedServiceCodeEnumValues = []ValueAddedServiceCode{
	"SCON",
	"CINS",
	"SIOT",
	"CDECL",
	"SGUAR",
	"UPPY",
}

func (v *ValueAddedServiceCode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ValueAddedServiceCode(value)
	for _, existing := range AllowedValueAddedServiceCodeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ValueAddedServiceCode", value)
}

// NewValueAddedServiceCodeFromValue returns a pointer to a valid ValueAddedServiceCode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewValueAddedServiceCodeFromValue(v string) (*ValueAddedServiceCode, error) {
	ev := ValueAddedServiceCode(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ValueAddedServiceCode: valid values are %v", v, AllowedValueAddedServiceCodeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ValueAddedServiceCode) IsValid() bool {
	for _, existing := range AllowedValueAddedServiceCodeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to valueAddedServiceCode value
func (v ValueAddedServiceCode) Ptr() *ValueAddedServiceCode {
	return &v
}

type NullableValueAddedServiceCode struct {
	value *ValueAddedServiceCode
	isSet bool
}

func (v NullableValueAddedServiceCode) Get() *ValueAddedServiceCode {
	return v.value
}

func (v *NullableValueAddedServiceCode) Set(val *ValueAddedServiceCode) {
	v.value = val
	v.isSet = true
}

func (v NullableValueAddedServiceCode) IsSet() bool {
	return v.isSet
}

func (v *NullableValueAddedServiceCode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableValueAddedServiceCode(val *ValueAddedServiceCode) *NullableValueAddedServiceCode {
	return &NullableValueAddedServiceCode{value: val, isSet: true}
}

func (v NullableValueAddedServiceCode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableValueAddedServiceCode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
