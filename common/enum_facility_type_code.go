/*
DCSA Components

Common components for DCSA APIs and Domains. This Domain maintains common SimpleTypes, Headers and parameters used throughout all DCSA APIs and Domains.  For a history of changes in this domain - please check [GitHub](https://github.com/dcsaorg/DCSA-OpenAPI/tree/master/domain/dcsa#v202). Please also [create a GitHub issue](https://github.com/dcsaorg/DCSA-OpenAPI/issues/new) if you have any questions/comments.

API version: 2.0.2
Contact: info@dcsa.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package common

import (
	"encoding/json"
	"fmt"
)

// FacilityTypeCode The code to identify the specific type of facility. - BOCR (Border crossing) - CLOC (Customer location) - COFS (Container freight station) - COYA (Deprecated - use OFFD intead) - OFFD (Off dock storage) - DEPO (Depot) - INTE (Inland terminal) - POTE (Port terminal) - PBPL (Pilot boarding place) - BRTH (Berth) - RAMP (Ramp)
type FacilityTypeCode string

// List of facilityTypeCode
const (
	BOCR FacilityTypeCode = "BOCR"
	CLOC FacilityTypeCode = "CLOC"
	COFS FacilityTypeCode = "COFS"
	COYA FacilityTypeCode = "COYA"
	OFFD FacilityTypeCode = "OFFD"
	DEPO FacilityTypeCode = "DEPO"
	INTE FacilityTypeCode = "INTE"
	POTE FacilityTypeCode = "POTE"
	PBPL FacilityTypeCode = "PBPL"
	BRTH FacilityTypeCode = "BRTH"
	RAMP FacilityTypeCode = "RAMP"
)

// All allowed values of FacilityTypeCode enum
var AllowedFacilityTypeCodeEnumValues = []FacilityTypeCode{
	"BOCR",
	"CLOC",
	"COFS",
	"COYA",
	"OFFD",
	"DEPO",
	"INTE",
	"POTE",
	"PBPL",
	"BRTH",
	"RAMP",
}

func (v *FacilityTypeCode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FacilityTypeCode(value)
	for _, existing := range AllowedFacilityTypeCodeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FacilityTypeCode", value)
}

// NewFacilityTypeCodeFromValue returns a pointer to a valid FacilityTypeCode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFacilityTypeCodeFromValue(v string) (*FacilityTypeCode, error) {
	ev := FacilityTypeCode(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FacilityTypeCode: valid values are %v", v, AllowedFacilityTypeCodeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FacilityTypeCode) IsValid() bool {
	for _, existing := range AllowedFacilityTypeCodeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to facilityTypeCode value
func (v FacilityTypeCode) Ptr() *FacilityTypeCode {
	return &v
}

type NullableFacilityTypeCode struct {
	value *FacilityTypeCode
	isSet bool
}

func (v NullableFacilityTypeCode) Get() *FacilityTypeCode {
	return v.value
}

func (v *NullableFacilityTypeCode) Set(val *FacilityTypeCode) {
	v.value = val
	v.isSet = true
}

func (v NullableFacilityTypeCode) IsSet() bool {
	return v.isSet
}

func (v *NullableFacilityTypeCode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFacilityTypeCode(val *FacilityTypeCode) *NullableFacilityTypeCode {
	return &NullableFacilityTypeCode{value: val, isSet: true}
}

func (v NullableFacilityTypeCode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFacilityTypeCode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
