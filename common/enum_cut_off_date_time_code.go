/*
DCSA Components

Common components for DCSA APIs and Domains. This Domain maintains common SimpleTypes, Headers and parameters used throughout all DCSA APIs and Domains.  For a history of changes in this domain - please check [GitHub](https://github.com/dcsaorg/DCSA-OpenAPI/tree/master/domain/dcsa#v202). Please also [create a GitHub issue](https://github.com/dcsaorg/DCSA-OpenAPI/issues/new) if you have any questions/comments.

API version: 2.0.2
Contact: info@dcsa.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package common

import (
	"encoding/json"
	"fmt"
)

// CutOffDateTimeCode Code for the cut-off time - DCO (Documentation cut-off) - VCO (VGM cut-off) - FCO (FCL delivery cut-off) - LCO (LCL delivery cut-off) - ECP (Empty container pick-up date and time) - EFC (Earliest full-container delivery date) - AFD (AMS Filing Due date)
type CutOffDateTimeCode string

// List of cutOffDateTimeCode
const (
	CutoffDateTimeDocumentation       CutOffDateTimeCode = "DCO"
	CutoffDateTimeVerifiedGrossMass   CutOffDateTimeCode = "VCO"
	CutoffDateTimeFCLDelivery         CutOffDateTimeCode = "FCO"
	CutoffDateTimeLCLDelivery         CutOffDateTimeCode = "LCO"
	CutoffDateTimeEmptyPickup         CutOffDateTimeCode = "ECP"
	CutoffDateTimeEarlierFullDelivery CutOffDateTimeCode = "EFC"
	CutoffDateTimeAMS                 CutOffDateTimeCode = "AFD"
)

// All allowed values of CutOffDateTimeCode enum
var AllowedCutOffDateTimeCodeEnumValues = []CutOffDateTimeCode{
	CutoffDateTimeDocumentation,
	CutoffDateTimeVerifiedGrossMass,
	CutoffDateTimeFCLDelivery,
	CutoffDateTimeLCLDelivery,
	CutoffDateTimeEmptyPickup,
	CutoffDateTimeEarlierFullDelivery,
	CutoffDateTimeAMS,
}

func (v *CutOffDateTimeCode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CutOffDateTimeCode(value)
	for _, existing := range AllowedCutOffDateTimeCodeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CutOffDateTimeCode", value)
}

// NewCutOffDateTimeCodeFromValue returns a pointer to a valid CutOffDateTimeCode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCutOffDateTimeCodeFromValue(v string) (*CutOffDateTimeCode, error) {
	ev := CutOffDateTimeCode(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CutOffDateTimeCode: valid values are %v", v, AllowedCutOffDateTimeCodeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CutOffDateTimeCode) IsValid() bool {
	for _, existing := range AllowedCutOffDateTimeCodeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to cutOffDateTimeCode value
func (v CutOffDateTimeCode) Ptr() *CutOffDateTimeCode {
	return &v
}

type NullableCutOffDateTimeCode struct {
	value *CutOffDateTimeCode
	isSet bool
}

func (v NullableCutOffDateTimeCode) Get() *CutOffDateTimeCode {
	return v.value
}

func (v *NullableCutOffDateTimeCode) Set(val *CutOffDateTimeCode) {
	v.value = val
	v.isSet = true
}

func (v NullableCutOffDateTimeCode) IsSet() bool {
	return v.isSet
}

func (v *NullableCutOffDateTimeCode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCutOffDateTimeCode(val *CutOffDateTimeCode) *NullableCutOffDateTimeCode {
	return &NullableCutOffDateTimeCode{value: val, isSet: true}
}

func (v NullableCutOffDateTimeCode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCutOffDateTimeCode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
