/*
DCSA Components

Common components for DCSA APIs and Domains. This Domain maintains common SimpleTypes, Headers and parameters used throughout all DCSA APIs and Domains.  For a history of changes in this domain - please check [GitHub](https://github.com/dcsaorg/DCSA-OpenAPI/tree/master/domain/dcsa#v202). Please also [create a GitHub issue](https://github.com/dcsaorg/DCSA-OpenAPI/issues/new) if you have any questions/comments.

API version: 2.0.2
Contact: info@dcsa.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package common

import (
	"encoding/json"
	"fmt"
)

// VesselType Categorization of ocean-going vessels distinguished by the main cargo the vessel carries. Possible values: - GCGO (General cargo) - CONT (Container) - RORO (RoRo) - CARC (Car carrier) - PASS (Passenger) - FERY (Ferry) - BULK (Bulk) - TANK (Tanker) - LGTK (Liquefied gas tanker) - ASSI (Assistance) - PILO (Pilot boat)
type VesselType string

// List of vesselType
const (
	GCGO VesselType = "GCGO"
	CONT VesselType = "CONT"
	RORO VesselType = "RORO"
	CARC VesselType = "CARC"
	PASS VesselType = "PASS"
	FERY VesselType = "FERY"
	BULK VesselType = "BULK"
	TANK VesselType = "TANK"
	LGTK VesselType = "LGTK"
	ASSI VesselType = "ASSI"
	PILO VesselType = "PILO"
)

// All allowed values of VesselType enum
var AllowedVesselTypeEnumValues = []VesselType{
	"GCGO",
	"CONT",
	"RORO",
	"CARC",
	"PASS",
	"FERY",
	"BULK",
	"TANK",
	"LGTK",
	"ASSI",
	"PILO",
}

func (v *VesselType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VesselType(value)
	for _, existing := range AllowedVesselTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VesselType", value)
}

// NewVesselTypeFromValue returns a pointer to a valid VesselType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVesselTypeFromValue(v string) (*VesselType, error) {
	ev := VesselType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VesselType: valid values are %v", v, AllowedVesselTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VesselType) IsValid() bool {
	for _, existing := range AllowedVesselTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to vesselType value
func (v VesselType) Ptr() *VesselType {
	return &v
}

type NullableVesselType struct {
	value *VesselType
	isSet bool
}

func (v NullableVesselType) Get() *VesselType {
	return v.value
}

func (v *NullableVesselType) Set(val *VesselType) {
	v.value = val
	v.isSet = true
}

func (v NullableVesselType) IsSet() bool {
	return v.isSet
}

func (v *NullableVesselType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVesselType(val *VesselType) *NullableVesselType {
	return &NullableVesselType{value: val, isSet: true}
}

func (v NullableVesselType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVesselType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
