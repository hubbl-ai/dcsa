/*
DCSA Components

Common components for DCSA APIs and Domains. This Domain maintains common SimpleTypes, Headers and parameters used throughout all DCSA APIs and Domains.  For a history of changes in this domain - please check [GitHub](https://github.com/dcsaorg/DCSA-OpenAPI/tree/master/domain/dcsa#v202). Please also [create a GitHub issue](https://github.com/dcsaorg/DCSA-OpenAPI/issues/new) if you have any questions/comments.

API version: 2.0.2
Contact: info@dcsa.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package common

import (
	"encoding/json"
	"fmt"
)

// ShipmentLocationTypeCode Links to the Location Type Code defined by DCSA. - PRE (Place of Receipt) - POL (Port of Loading) - POD (Port of Discharge) - PDE (Place of Delivery) - PCF (Pre-carriage From) - PSR (Pre-carriage under shipperâ€™s responsibility) - OIR (Onward In-land Routing) - DRL (Depot release location) - ORI (Origin of goods) - IEL (Container intermediate export stop off location) - PTP (Prohibited transshipment port) - RTP (Requested transshipment port) - FCD (Full container drop-off location) - ECP (Empty container pick-up location)
type ShipmentLocationTypeCode string

// List of shipmentLocationTypeCode
const (
	PRE ShipmentLocationTypeCode = "PRE"
	POL ShipmentLocationTypeCode = "POL"
	POD ShipmentLocationTypeCode = "POD"
	PDE ShipmentLocationTypeCode = "PDE"
	PCF ShipmentLocationTypeCode = "PCF"
	PSR ShipmentLocationTypeCode = "PSR"
	OIR ShipmentLocationTypeCode = "OIR"
	DRL ShipmentLocationTypeCode = "DRL"
	ORI ShipmentLocationTypeCode = "ORI"
	IEL ShipmentLocationTypeCode = "IEL"
	PTP ShipmentLocationTypeCode = "PTP"
	RTP ShipmentLocationTypeCode = "RTP"
	FCD ShipmentLocationTypeCode = "FCD"
	ECP ShipmentLocationTypeCode = "ECP"
)

// All allowed values of ShipmentLocationTypeCode enum
var AllowedShipmentLocationTypeCodeEnumValues = []ShipmentLocationTypeCode{
	"PRE",
	"POL",
	"POD",
	"PDE",
	"PCF",
	"PSR",
	"OIR",
	"DRL",
	"ORI",
	"IEL",
	"PTP",
	"RTP",
	"FCD",
	"ECP",
}

func (v *ShipmentLocationTypeCode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ShipmentLocationTypeCode(value)
	for _, existing := range AllowedShipmentLocationTypeCodeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ShipmentLocationTypeCode", value)
}

// NewShipmentLocationTypeCodeFromValue returns a pointer to a valid ShipmentLocationTypeCode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewShipmentLocationTypeCodeFromValue(v string) (*ShipmentLocationTypeCode, error) {
	ev := ShipmentLocationTypeCode(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ShipmentLocationTypeCode: valid values are %v", v, AllowedShipmentLocationTypeCodeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ShipmentLocationTypeCode) IsValid() bool {
	for _, existing := range AllowedShipmentLocationTypeCodeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to shipmentLocationTypeCode value
func (v ShipmentLocationTypeCode) Ptr() *ShipmentLocationTypeCode {
	return &v
}

type NullableShipmentLocationTypeCode struct {
	value *ShipmentLocationTypeCode
	isSet bool
}

func (v NullableShipmentLocationTypeCode) Get() *ShipmentLocationTypeCode {
	return v.value
}

func (v *NullableShipmentLocationTypeCode) Set(val *ShipmentLocationTypeCode) {
	v.value = val
	v.isSet = true
}

func (v NullableShipmentLocationTypeCode) IsSet() bool {
	return v.isSet
}

func (v *NullableShipmentLocationTypeCode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableShipmentLocationTypeCode(val *ShipmentLocationTypeCode) *NullableShipmentLocationTypeCode {
	return &NullableShipmentLocationTypeCode{value: val, isSet: true}
}

func (v NullableShipmentLocationTypeCode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableShipmentLocationTypeCode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
